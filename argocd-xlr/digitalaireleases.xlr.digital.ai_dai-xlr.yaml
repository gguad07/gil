apiVersion: xlr.digital.ai/v1alpha1
kind: DigitalaiRelease
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"xlr.digital.ai/v1alpha1","kind":"DigitalaiRelease","metadata":{"annotations":{},"name":"dai-xlr","namespace":"digitalai"},"spec":{"AdminPassword":"giladmin","ForceRemoveMissingTypes":false,"GenerateXlConfig":true,"HealthPeriodScans":10,"HealthProbeFailureThreshold":12,"HealthProbes":true,"HealthProbesLivenessTimeout":60,"HealthProbesReadinessTimeout":60,"ImagePullPolicy":"Always","ImageRepository":"xebialabs/xl-release","ImageTag":"23.1.0","K8sSetup":{"Platform":"AzureAKS"},"KeystorePassphrase":"giladmin","MetricsEnabled":false,"Persistence":{"AccessMode":"ReadWriteOnce","Annotations":{"helm.sh/resource-policy":"keep"},"Enabled":true,"Size":"1Gi","StorageClass":"default"},"RepositoryKeystore":"zs7OzgAAAAIAAAABAAAAAwAWZGVwbG95aXQtcGFzc3N3b3JkLWtleQAAAYotU2SkrO0ABXNyADNjb20uc3VuLmNyeXB0by5wcm92aWRlci5TZWFsZWRPYmplY3RGb3JLZXlQcm90ZWN0b3LNV8pZ5zC7UwIAAHhyABlqYXZheC5jcnlwdG8uU2VhbGVkT2JqZWN0PjY9psO3VHACAARbAA1lbmNvZGVkUGFyYW1zdAACW0JbABBlbmNyeXB0ZWRDb250ZW50cQB+AAJMAAlwYXJhbXNBbGd0ABJMamF2YS9sYW5nL1N0cmluZztMAAdzZWFsQWxncQB+AAN4cHVyAAJbQqzzF/gGCFTgAgAAeHAAAAARMA8ECAwtgD4ULc0RAgMDDUB1cQB+AAUAAACQP7w+ndxFVr3/bjTZWfBSSFxhsHK15b63fkYvkuATwUeyvbRRxfJlRTjqKzm686eOuDXv6sFeRGX2VdBXxEZFBO5axwgcHuHZTkH5BUd3MiUiKm+2BNTyPNte++pTMQNqQd7pReK/3qqzJW9Zn8s19mpvIW24RZKYCr8wAn25qB9R+qyRWYyO9oPGTATOdN/RdAAWUEJFV2l0aE1ENUFuZFRyaXBsZURFU3QAFlBCRVdpdGhNRDVBbmRUcmlwbGVERVPK8J5V4MXNfb/A8pT1TubsIiIDiA==","TinyToolsImageRepository":"xebialabs/tiny-tools","TinyToolsImageTag":"22.2.0","UseExistingDB":{"Enabled":false},"UseExistingMQ":{"Enabled":false},"UseIpAsHostname":false,"affinity":{},"haproxy-ingress":{"controller":{"affinity":{},"autoscaling":{"customMetrics":[],"enabled":false},"config":{},"daemonset":{"hostPorts":{"http":80,"https":443,"tcp":[]},"useHostPort":false},"defaultBackendService":"","dnsPolicy":"ClusterFirst","enableStaticPorts":true,"extraArgs":{},"extraContainers":[],"extraEnvs":[],"extraVolumeMounts":[],"extraVolumes":[],"haproxy":{"enabled":false,"extraArgs":{},"image":{"pullPolicy":"IfNotPresent","repository":"haproxy","tag":"2.3.14-alpine"},"resources":{}},"healthzPort":10253,"hostNetwork":false,"image":{"pullPolicy":"IfNotPresent","repository":"quay.io/jcmoraisjr/haproxy-ingress","tag":"v0.13.4"},"imagePullSecrets":[],"ingressClass":"haproxy-dai-xlr","initContainers":[],"kind":"Deployment","lifecycle":{},"livenessProbe":{"failureThreshold":3,"initialDelaySeconds":10,"path":"/healthz","periodSeconds":10,"port":10253,"successThreshold":1,"timeoutSeconds":1},"logs":{"enabled":false,"extraVolumeMounts":[],"image":{"pullPolicy":"IfNotPresent","repository":"whereisaaron/kube-syslog-sidecar","tag":"latest"},"resources":{}},"metrics":{"controllerPort":10254,"embedded":true,"enabled":false,"extraArgs":{},"image":{"pullPolicy":"IfNotPresent","repository":"quay.io/prometheus/haproxy-exporter","tag":"v0.11.0"},"port":9101,"resources":{},"service":{"annotations":{},"clusterIP":"","externalIPs":[],"loadBalancerIP":"","loadBalancerSourceRanges":[],"serviceControllerPort":10254,"servicePort":9101,"type":"ClusterIP"}},"minAvailable":1,"minReadySeconds":0,"nodeSelector":{},"podAffinity":{},"podAnnotations":{},"podLabels":{},"priorityClassName":"","readinessProbe":{"failureThreshold":3,"initialDelaySeconds":10,"path":"/healthz","periodSeconds":10,"port":10253,"successThreshold":1,"timeoutSeconds":1},"replicaCount":1,"resources":{},"securityContext":{},"service":{"annotations":{},"clusterIP":"","clusterIPs":[],"externalIPs":[],"externalTrafficPolicy":"Local","extraPorts":[],"healthCheckNodePort":0,"httpPorts":[{"port":80,"targetPort":"http"}],"httpsPorts":[{"port":443,"targetPort":"https"}],"labels":{},"loadBalancerIP":"","loadBalancerSourceRanges":[],"type":"LoadBalancer"},"serviceMonitor":{"annotations":{},"enabled":false,"honorLabels":true,"interval":"10s","labels":{}},"stats":{"enabled":false,"port":1936,"service":{"annotations":{},"clusterIP":"","externalIPs":[],"loadBalancerIP":"","loadBalancerSourceRanges":[],"servicePort":1936,"type":"ClusterIP"}},"tcp":{},"template":"","terminationGracePeriodSeconds":60,"tolerations":[],"updateStrategy":{"rollingUpdate":{"maxUnavailable":1},"type":"RollingUpdate"}},"defaultBackend":{"affinity":{},"enabled":false,"image":{"pullPolicy":"IfNotPresent","repository":"k8s.gcr.io/defaultbackend-amd64","tag":"1.5"},"minAvailable":1,"name":"default-backend","nodeSelector":{},"podAnnotations":{},"podLabels":{},"replicaCount":1,"resources":{"limits":{"cpu":"10m","memory":"20Mi"}},"securityContext":{},"service":{"annotations":{},"clusterIP":"","externalIPs":[],"loadBalancerIP":"","loadBalancerSourceRanges":[],"name":"ingress-default-backend","servicePort":8080,"type":"ClusterIP"},"tolerations":[]},"fullnameOverride":"","global":{},"install":false,"nameOverride":"","rbac":{"create":true,"secret":{"write":false},"security":{"enable":false}},"serviceAccount":{"create":true,"name":null}},"ingress":{"Enabled":true,"annotations":{"kubernetes.io/ingress.class":"nginx-dai-xlr","nginx.ingress.kubernetes.io/affinity":"cookie","nginx.ingress.kubernetes.io/proxy-connect-timeout":"60","nginx.ingress.kubernetes.io/proxy-read-timeout":"60","nginx.ingress.kubernetes.io/proxy-send-timeout":"60","nginx.ingress.kubernetes.io/rewrite-target":"/","nginx.ingress.kubernetes.io/session-cookie-name":"JSESSIONID","nginx.ingress.kubernetes.io/ssl-redirect":"false"},"hosts":["giltest.com"],"path":"/"},"keycloak":{"affinity":"podAntiAffinity:\n  requiredDuringSchedulingIgnoredDuringExecution:\n    - labelSelector:\n        matchLabels:\n          {{- include \"keycloak.selectorLabels\" . | nindent 10 }}\n        matchExpressions:\n          - key: app.kubernetes.io/component\n            operator: NotIn\n            values:\n              - test\n      topologyKey: kubernetes.io/hostname\n  preferredDuringSchedulingIgnoredDuringExecution:\n    - weight: 100\n      podAffinityTerm:\n        labelSelector:\n          matchLabels:\n            {{- include \"keycloak.selectorLabels\" . | nindent 12 }}\n          matchExpressions:\n            - key: app.kubernetes.io/component\n              operator: NotIn\n              values:\n                - test\n        topologyKey: failure-domain.beta.kubernetes.io/zone\n","args":[],"autoscaling":{"behavior":{"scaleDown":{"policies":[{"periodSeconds":300,"type":"Pods","value":1}],"stabilizationWindowSeconds":300}},"enabled":false,"labels":{},"maxReplicas":10,"metrics":[{"resource":{"name":"cpu","target":{"averageUtilization":80,"type":"Utilization"}},"type":"Resource"}],"minReplicas":3},"clusterDomain":"cluster.local","command":[],"enableServiceLinks":true,"extraContainers":"","extraEnv":"- name: PROXY_ADDRESS_FORWARDING\n  value: \"true\"\n- name: KEYCLOAK_USER\n  value: admin\n- name: KEYCLOAK_PASSWORD\n  value: admin\n- name: JGROUPS_DISCOVERY_PROTOCOL\n  value: dns.DNS_PING\n- name: JGROUPS_DISCOVERY_PROPERTIES\n  value: 'dns_query={{ include \"keycloak.serviceDnsName\" . }}'\n- name: CACHE_OWNERS_COUNT\n  value: \"2\"\n- name: CACHE_OWNERS_AUTH_SESSIONS_COUNT\n  value: \"2\"\n- name: JAVA_OPTS\n  value: \u003e-\n    -XX:+UseContainerSupport\n    -XX:MaxRAMPercentage=50.0\n    -Djava.net.preferIPv4Stack=true\n    -Djboss.modules.system.pkgs=$JBOSS_MODULES_SYSTEM_PKGS\n    -Djava.awt.headless=true\n- name: DB_VENDOR\n  value: postgres\n- name: DB_ADDR\n  value: {{ .Release.Name }}-postgresql\n- name: DB_PORT\n  value: \"5432\"\n- name: DB_DATABASE\n  value: keycloak\n- name: DB_USER\n  value: keycloak\n- name: DB_PASSWORD\n  value: keycloak\n- name: KEYCLOAK_IMPORT\n  value: /realm/digitalai-platform-realm.json\n","extraEnvFrom":"","extraInitContainers":"","extraPorts":[],"extraServiceMonitor":{"annotations":{},"enabled":false,"interval":"10s","labels":{},"namespace":"","namespaceSelector":{},"path":"/auth/realms/master/metrics","port":"http","scrapeTimeout":"10s"},"extraVolumeMounts":"- name: realm-config\n  mountPath: \"/realm/\"\n  readOnly: true\n","extraVolumes":"- name: realm-config\n  configMap:\n    name: {{ .Release.Name }}-realm\n","fullnameOverride":"","global":{},"hostAliases":[],"image":{"pullPolicy":"IfNotPresent","repository":"docker.io/jboss/keycloak","tag":""},"imagePullSecrets":[],"ingress":{"annotations":{"kubernetes.io/ingress.class":"nginx-dai-xlr","nginx.ingress.kubernetes.io/ssl-redirect":"false"},"console":{"annotations":{},"enabled":false,"ingressClassName":"","rules":[{"host":null,"paths":[{"path":"/auth/admin/","pathType":"Prefix"}]}]},"enabled":true,"ingressClassName":"","labels":{},"rules":[{"host":null,"paths":[{"path":"/","pathType":"Prefix"}]}],"servicePort":"http","tls":[]},"install":false,"lifecycleHooks":"","livenessProbe":"httpGet:\n  path: /auth/\n  port: http\ninitialDelaySeconds: 0\ntimeoutSeconds: 5\n","nameOverride":"","networkPolicy":{"enabled":false,"extraFrom":[],"labels":{}},"nodeSelector":{},"pgchecker":{"image":{"pullPolicy":"IfNotPresent","repository":"docker.io/busybox","tag":1.32},"resources":{"limits":{"cpu":"20m","memory":"32Mi"},"requests":{"cpu":"20m","memory":"32Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"runAsGroup":1000,"runAsNonRoot":true,"runAsUser":1000}},"podAnnotations":{},"podDisruptionBudget":{},"podLabels":{},"podManagementPolicy":"Parallel","podSecurityContext":{"fsGroup":1000},"postgresql":{"audit":{"clientMinMessages":"error","logConnections":false,"logDisconnections":false,"logHostname":false,"logLinePrefix":"","logTimezone":"","pgAuditLog":"","pgAuditLogCatalog":"off"},"common":{"exampleValue":"common-chart","global":{"postgresql":{}}},"commonAnnotations":{},"containerSecurityContext":{"enabled":true,"runAsUser":1001},"customLivenessProbe":{},"customReadinessProbe":{},"customStartupProbe":{},"enabled":false,"extraDeploy":[],"extraEnv":[],"global":{"postgresql":{}},"image":{"debug":false,"pullPolicy":"IfNotPresent","registry":"docker.io","repository":"bitnami/postgresql","tag":"11.11.0-debian-10-r31"},"ldap":{"baseDN":"","bindDN":"","bind_password":null,"enabled":false,"port":"","prefix":"","scheme":"","search_attr":"","search_filter":"","server":"","suffix":"","tls":{},"url":""},"livenessProbe":{"enabled":true,"failureThreshold":6,"initialDelaySeconds":30,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":5},"metrics":{"enabled":false,"extraEnvVars":{},"image":{"pullPolicy":"IfNotPresent","registry":"docker.io","repository":"bitnami/postgres-exporter","tag":"0.9.0-debian-10-r6"},"livenessProbe":{"enabled":true,"failureThreshold":6,"initialDelaySeconds":5,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":5},"prometheusRule":{"additionalLabels":{},"enabled":false,"namespace":"","rules":[]},"readinessProbe":{"enabled":true,"failureThreshold":6,"initialDelaySeconds":5,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":5},"securityContext":{"enabled":false,"runAsUser":1001},"service":{"annotations":{"prometheus.io/port":"9187","prometheus.io/scrape":"true"},"loadBalancerIP":null,"type":"ClusterIP"},"serviceMonitor":{"additionalLabels":{},"enabled":false}},"networkPolicy":{"allowExternal":true,"enabled":false,"explicitNamespacesSelector":{}},"persistence":{"accessModes":["ReadWriteOnce"],"annotations":{},"enabled":true,"mountPath":"/bitnami/postgresql","selector":{},"size":"1Gi","subPath":""},"postgresqlDataDir":"/bitnami/postgresql/data","postgresqlDatabase":"keycloak","postgresqlDbUserConnectionLimit":null,"postgresqlMaxConnections":null,"postgresqlPassword":"keycloak","postgresqlPghbaRemoveFilters":null,"postgresqlPostgresConnectionLimit":null,"postgresqlSharedPreloadLibraries":"pgaudit","postgresqlStatementTimeout":null,"postgresqlTcpKeepalivesCount":null,"postgresqlTcpKeepalivesIdle":null,"postgresqlTcpKeepalivesInterval":null,"postgresqlUsername":"keycloak","primary":{"affinity":{},"annotations":{},"extraInitContainers":[],"extraVolumeMounts":[],"extraVolumes":[],"labels":{},"nodeAffinityPreset":{"key":"","type":"","values":[]},"nodeSelector":{},"podAffinityPreset":"","podAnnotations":{},"podAntiAffinityPreset":"soft","podLabels":{},"priorityClassName":"","service":{},"sidecars":[],"tolerations":[]},"primaryAsStandBy":{"enabled":false},"psp":{"create":false},"rbac":{"create":false},"readReplicas":{"affinity":{},"annotations":{},"extraInitContainers":[],"extraVolumeMounts":[],"extraVolumes":[],"labels":{},"nodeAffinityPreset":{"key":"","type":"","values":[]},"nodeSelector":{},"persistence":{"enabled":true},"podAffinityPreset":"","podAnnotations":{},"podAntiAffinityPreset":"soft","podLabels":{},"priorityClassName":"","resources":{},"service":{},"sidecars":[],"tolerations":[]},"readinessProbe":{"enabled":true,"failureThreshold":6,"initialDelaySeconds":5,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":5},"replication":{"applicationName":"my_application","enabled":false,"numSynchronousReplicas":0,"password":"repl_password","readReplicas":1,"synchronousCommit":"off","user":"repl_user"},"resources":{"requests":{"cpu":"250m","memory":"256Mi"}},"securityContext":{"enabled":true,"fsGroup":1001},"service":{"annotations":{},"port":5432,"type":"ClusterIP"},"serviceAccount":{"enabled":false},"shmVolume":{"chmod":{"enabled":true},"enabled":true},"startupProbe":{"enabled":false,"failureThreshold":10,"initialDelaySeconds":30,"periodSeconds":15,"successThreshold":1,"timeoutSeconds":5},"tls":{"certCAFilename":null,"certFilename":"","certKeyFilename":"","certificatesSecret":"","crlFilename":null,"enabled":false,"preferServerCiphers":true},"updateStrategy":{"type":"RollingUpdate"},"volumePermissions":{"enabled":false,"image":{"pullPolicy":"Always","registry":"docker.io","repository":"bitnami/bitnami-shell","tag":"10"},"securityContext":{"runAsUser":0}}},"priorityClassName":"","prometheusRule":{"annotations":{},"enabled":false,"labels":{},"rules":[]},"rbac":{"create":false,"rules":[]},"readinessProbe":"httpGet:\n  path: /auth/realms/master\n  port: http\ninitialDelaySeconds: 30\ntimeoutSeconds: 1\n","replicas":1,"resources":{},"restartPolicy":"Always","route":{"annotations":{},"enabled":false,"host":"","labels":{},"path":"/","tls":{"enabled":true,"insecureEdgeTerminationPolicy":"Redirect","termination":"edge"}},"secrets":{},"securityContext":{"runAsNonRoot":true,"runAsUser":1000},"service":{"annotations":{},"externalTrafficPolicy":"Cluster","extraPorts":[],"httpManagementPort":9990,"httpPort":80,"httpsPort":8443,"labels":{},"loadBalancerIP":"","loadBalancerSourceRanges":[],"sessionAffinity":"","sessionAffinityConfig":{},"type":"LoadBalancer"},"serviceAccount":{"annotations":{},"create":true,"imagePullSecrets":[],"labels":{},"name":""},"serviceMonitor":{"annotations":{},"enabled":false,"interval":"10s","labels":{},"namespace":"","namespaceSelector":{},"path":"/metrics","port":"http-management","scrapeTimeout":"10s"},"startupProbe":"httpGet:\n  path: /auth/\n  port: http\ninitialDelaySeconds: 30\ntimeoutSeconds: 1\nfailureThreshold: 60\nperiodSeconds: 5\n","startupScripts":{"keycloak.cli":"{{- .Files.Get \"scripts/keycloak.cli\" }}\n"},"statefulsetAnnotations":{},"statefulsetLabels":{},"terminationGracePeriodSeconds":60,"test":{"enabled":false,"image":{"pullPolicy":"IfNotPresent","repository":"docker.io/unguiculus/docker-python3-phantomjs-selenium","tag":"v1"},"podSecurityContext":{"fsGroup":1000},"securityContext":{"runAsNonRoot":true,"runAsUser":1000}},"tolerations":[],"topologySpreadConstraints":null},"nginx-ingress-controller":{"addHeaders":{},"affinity":{},"args":[],"autoscaling":{"enabled":false,"maxReplicas":11,"minReplicas":1,"targetCPU":"","targetMemory":""},"command":[],"common":{"exampleValue":"common-chart","global":{"imagePullSecrets":[],"imageRegistry":""}},"commonAnnotations":{},"commonLabels":{},"config":{},"configMapNamespace":"","containerPorts":{"http":80,"https":443,"metrics":10254},"containerSecurityContext":{"allowPrivilegeEscalation":true,"capabilities":{"add":["NET_BIND_SERVICE"],"drop":["ALL"]},"enabled":true,"runAsUser":1001},"customLivenessProbe":{},"customReadinessProbe":{},"customTemplate":{"configMapKey":"","configMapName":""},"daemonset":{"hostPorts":{"http":80,"https":443},"useHostPort":false},"defaultBackend":{"affinity":{},"containerPort":8080,"containerSecurityContext":{"enabled":true,"runAsUser":1001},"enabled":true,"extraArgs":{},"hostAliases":[],"image":{"pullPolicy":"IfNotPresent","pullSecrets":[],"registry":"docker.io","repository":"bitnami/nginx","tag":"1.21.3-debian-10-r48"},"livenessProbe":{"enabled":true,"failureThreshold":3,"httpGet":{"path":"/healthz","port":"http","scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":5},"nodeAffinityPreset":{"key":"","type":"","values":[]},"nodeSelector":{},"pdb":{"create":false,"maxUnavailable":"","minAvailable":1},"podAffinityPreset":"","podAnnotations":{},"podAntiAffinityPreset":"soft","podLabels":{},"podSecurityContext":{"enabled":true,"fsGroup":1001},"priorityClassName":"","readinessProbe":{"enabled":true,"failureThreshold":6,"httpGet":{"path":"/healthz","port":"http","scheme":"HTTP"},"initialDelaySeconds":0,"periodSeconds":5,"successThreshold":1,"timeoutSeconds":5},"replicaCount":1,"resources":{"limits":{},"requests":{}},"serverBlockConfig":"location /healthz {\n  return 200;\n}\n\nlocation / {\n  return 404;\n}","service":{"port":80,"type":"ClusterIP"},"tolerations":[]},"defaultBackendService":"","dhParam":"","dnsPolicy":"ClusterFirst","electionID":"ingress-controller-leader","extraArgs":{"ingress-class":"nginx-dai-xlr"},"extraDeploy":[],"extraEnvVars":[],"extraEnvVarsCM":"","extraEnvVarsSecret":"","extraVolumeMounts":[],"extraVolumes":[],"fullnameOverride":"","global":{"imagePullSecrets":[],"imageRegistry":""},"hostAliases":[],"hostNetwork":false,"image":{"pullPolicy":"IfNotPresent","pullSecrets":[],"registry":"docker.io","repository":"bitnami/nginx-ingress-controller","tag":"1.0.4-debian-10-r13"},"ingressClassResource":{"controllerClass":"k8s.io/ingress-nginx-dai-xlr","default":false,"enabled":true,"name":"nginx-dai-xlr","parameters":{}},"initContainers":[],"install":true,"kind":"Deployment","lifecycle":{},"livenessProbe":{"enabled":true,"failureThreshold":3,"httpGet":{"path":"/healthz","port":10254,"scheme":"HTTP"},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"maxmindLicenseKey":"","metrics":{"enabled":false,"prometheusRule":{"additionalLabels":{},"enabled":false,"namespace":"","rules":[]},"service":{"annotations":{"prometheus.io/port":"{{ .Values.metrics.service.port }}","prometheus.io/scrape":"true"},"port":9913,"type":"ClusterIP"},"serviceMonitor":{"enabled":false,"interval":"30s","namespace":"","scrapeTimeout":"","selector":{}}},"minReadySeconds":0,"nameOverride":"","nodeAffinityPreset":{"key":"","type":"","values":[]},"nodeSelector":{},"pdb":{"create":false,"maxUnavailable":"","minAvailable":1},"podAffinityPreset":"","podAnnotations":{},"podAntiAffinityPreset":"soft","podLabels":{},"podSecurityContext":{"enabled":true,"fsGroup":1001},"podSecurityPolicy":{"enabled":false},"priorityClassName":"","proxySetHeaders":{},"publishService":{"enabled":false,"pathOverride":""},"rbac":{"create":true},"readinessProbe":{"enabled":true,"failureThreshold":3,"httpGet":{"path":"/healthz","port":10254,"scheme":"HTTP"},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"replicaCount":1,"reportNodeInternalIp":false,"resources":{"limits":{},"requests":{}},"revisionHistoryLimit":10,"scope":{"enabled":false},"service":{"annotations":{},"clusterIP":"","externalIPs":[],"externalTrafficPolicy":"","healthCheckNodePort":0,"labels":{},"loadBalancerIP":"","loadBalancerSourceRanges":[],"nodePorts":{"http":"","https":"","tcp":{},"udp":{}},"ports":{"http":80,"https":443},"targetPorts":{"http":"http","https":"https"},"type":"LoadBalancer"},"serviceAccount":{"annotations":{},"create":true,"name":""},"sidecars":[],"tcp":{},"tcpConfigMapNamespace":"","terminationGracePeriodSeconds":60,"tolerations":[],"topologySpreadConstraints":[],"udp":{},"udpConfigMapNamespace":"","updateStrategy":{},"watchIngressWithoutClass":false},"nodeSelector":{},"oidc":{"enabled":false,"external":false},"postgresql":{"audit":{"clientMinMessages":"error","logConnections":false,"logDisconnections":false,"logHostname":false,"logLinePrefix":"","logTimezone":"","pgAuditLog":"","pgAuditLogCatalog":"off"},"common":{"exampleValue":"common-chart","global":{"imagePullSecrets":[],"imageRegistry":"","postgresql":{"existingSecret":"","postgresqlDatabase":"","postgresqlPassword":"","postgresqlUsername":"","replicationPassword":"","servicePort":""},"storageClass":""}},"commonAnnotations":{},"configurationConfigMap":"","containerSecurityContext":{"enabled":true,"runAsUser":1001},"customLivenessProbe":{},"customReadinessProbe":{},"customStartupProbe":{},"diagnosticMode":{"args":["infinity"],"command":["sleep"],"enabled":false},"existingSecret":"","extendedConfConfigMap":"","extraDeploy":[],"extraEnv":[],"extraEnvVarsCM":"","fullnameOverride":"","global":{"imagePullSecrets":[],"imageRegistry":"","postgresql":{"existingSecret":"","postgresqlDatabase":"","postgresqlPassword":"postgres","postgresqlUsername":"","replicationPassword":"","servicePort":""},"storageClass":""},"image":{"debug":false,"pullPolicy":"IfNotPresent","pullSecrets":[],"registry":"docker.io","repository":"bitnami/postgresql","tag":"11.13.0-debian-10-r73"},"initdbPassword":"","initdbScripts":{},"initdbScriptsConfigMap":"","initdbScriptsSecret":"postgresql-init-sql-xlr","initdbUser":"","install":true,"ldap":{"baseDN":"","bindDN":"","bind_password":"","enabled":false,"port":"","prefix":"","scheme":"","search_attr":"","search_filter":"","server":"","suffix":"","tls":"","url":""},"lifecycleHooks":{},"livenessProbe":{"enabled":true,"failureThreshold":6,"initialDelaySeconds":30,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":5},"metrics":{"customMetrics":{},"enabled":false,"extraEnvVars":[],"image":{"pullPolicy":"IfNotPresent","pullSecrets":[],"registry":"docker.io","repository":"bitnami/postgres-exporter","tag":"0.10.0-debian-10-r101"},"livenessProbe":{"enabled":true,"failureThreshold":6,"initialDelaySeconds":5,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":5},"prometheusRule":{"additionalLabels":{},"enabled":false,"namespace":"","rules":[]},"readinessProbe":{"enabled":true,"failureThreshold":6,"initialDelaySeconds":5,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":5},"resources":{},"securityContext":{"enabled":false,"runAsUser":1001},"service":{"annotations":{"prometheus.io/port":"9187","prometheus.io/scrape":"true"},"loadBalancerIP":"","type":"ClusterIP"},"serviceMonitor":{"additionalLabels":{},"enabled":false,"interval":"","metricRelabelings":[],"namespace":"","relabelings":[],"scrapeTimeout":""}},"nameOverride":"","networkPolicy":{"allowExternal":true,"enabled":false,"explicitNamespacesSelector":{}},"persistence":{"accessModes":["ReadWriteOnce"],"annotations":{},"enabled":true,"existingClaim":"","mountPath":"/bitnami/postgresql","selector":{},"size":"1Gi","storageClass":"default","subPath":""},"pgHbaConfiguration":"","postgresqlConfiguration":{},"postgresqlDataDir":"/bitnami/postgresql/data","postgresqlDatabase":"","postgresqlDbUserConnectionLimit":"","postgresqlExtendedConf":{},"postgresqlInitdbArgs":"","postgresqlInitdbWalDir":"","postgresqlMaxConnections":"150","postgresqlPassword":"postgres","postgresqlPghbaRemoveFilters":"","postgresqlPostgresConnectionLimit":"","postgresqlPostgresPassword":"","postgresqlSharedPreloadLibraries":"pgaudit","postgresqlStatementTimeout":"","postgresqlTcpKeepalivesCount":"","postgresqlTcpKeepalivesIdle":"","postgresqlTcpKeepalivesInterval":"","postgresqlUsername":"postgres","primary":{"affinity":{},"annotations":{},"extraInitContainers":[],"extraPodSpec":{},"extraVolumeMounts":[],"extraVolumes":[],"labels":{},"nodeAffinityPreset":{"key":"","type":"","values":[]},"nodeSelector":{},"podAffinityPreset":"","podAnnotations":{},"podAntiAffinityPreset":"soft","podLabels":{},"priorityClassName":"","service":{"clusterIP":"","nodePort":"","type":""},"sidecars":[],"tolerations":[]},"primaryAsStandBy":{"enabled":false,"primaryHost":"","primaryPort":""},"psp":{"create":false},"rbac":{"create":false},"readReplicas":{"affinity":{},"annotations":{},"extraInitContainers":[],"extraPodSpec":{},"extraVolumeMounts":[],"extraVolumes":[],"labels":{},"nodeAffinityPreset":{"key":"","type":"","values":[]},"nodeSelector":{},"persistence":{"enabled":true},"podAffinityPreset":"","podAnnotations":{},"podAntiAffinityPreset":"soft","podLabels":{},"priorityClassName":"","resources":{},"service":{"clusterIP":"","nodePort":"","type":""},"sidecars":[],"tolerations":[],"topologySpreadConstraints":[]},"readinessProbe":{"enabled":true,"failureThreshold":6,"initialDelaySeconds":5,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":5},"replication":{"applicationName":"my_application","enabled":false,"numSynchronousReplicas":0,"password":"repl_password","readReplicas":1,"singleService":true,"synchronousCommit":"off","uniqueServices":false,"user":"repl_user"},"resources":{"requests":{"cpu":"250m","memory":"256Mi"}},"schedulerName":"","securityContext":{"enabled":true,"fsGroup":1001},"service":{"annotations":{},"clusterIP":"","externalTrafficPolicy":"Cluster","loadBalancerIP":"","loadBalancerSourceRanges":[],"nodePort":"","port":5432,"type":"ClusterIP"},"serviceAccount":{"autoMount":false,"enabled":false,"name":""},"shmVolume":{"chmod":{"enabled":true},"enabled":true,"sizeLimit":""},"startupProbe":{"enabled":false,"failureThreshold":10,"initialDelaySeconds":30,"periodSeconds":15,"successThreshold":1,"timeoutSeconds":5},"terminationGracePeriodSeconds":"","tls":{"autoGenerated":false,"certCAFilename":"","certFilename":"","certKeyFilename":"","certificatesSecret":"","crlFilename":"","enabled":false,"preferServerCiphers":true},"updateStrategy":{"type":"RollingUpdate"},"usePasswordFile":false,"volumePermissions":{"enabled":false,"image":{"pullPolicy":"IfNotPresent","pullSecrets":[],"registry":"docker.io","repository":"bitnami/bitnami-shell","tag":"10-debian-10-r233"},"securityContext":{"runAsUser":0}}},"rabbitmq":{"advancedConfiguration":"","affinity":{},"args":[],"auth":{"erlangCookie":"RELEASERABBITMQCLUSTER","existingErlangSecret":"","existingPasswordSecret":"","password":"guest","tls":{"autoGenerated":false,"caCertificate":"","enabled":false,"existingSecret":"","existingSecretFullChain":false,"failIfNoPeerCert":true,"serverCertificate":"","serverKey":"","sslOptionsVerify":"verify_peer"},"username":"guest"},"clusterDomain":"cluster.local","clustering":{"addressType":"hostname","enabled":true,"forceBoot":true,"partitionHandling":"autoheal","rebalance":false},"command":[],"common":{"exampleValue":"common-chart","global":{"imagePullSecrets":[],"imageRegistry":"","storageClass":""}},"commonAnnotations":{},"communityPlugins":"","configuration":"{{- if not .Values.loadDefinition.enabled -}}\n## Username and password\n##\ndefault_user = {{ .Values.auth.username }}\ndefault_pass = CHANGEME\n{{- end }}\n{{- if .Values.clustering.enabled }}\n## Clustering\n##\ncluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s\ncluster_formation.k8s.host = kubernetes.default.svc.{{ .Values.clusterDomain }}\ncluster_formation.node_cleanup.interval = 10\ncluster_formation.node_cleanup.only_log_warning = true\ncluster_partition_handling = {{ .Values.clustering.partitionHandling }}\n{{- end }}\n# queue master locator\nqueue_master_locator = min-masters\n# enable guest user\nloopback_users.guest = false\n{{ tpl .Values.extraConfiguration . }}\n{{- if .Values.auth.tls.enabled }}\nssl_options.verify = {{ .Values.auth.tls.sslOptionsVerify }}\nlisteners.ssl.default = {{ .Values.service.tlsPort }}\nssl_options.fail_if_no_peer_cert = {{ .Values.auth.tls.failIfNoPeerCert }}\nssl_options.cacertfile = /opt/bitnami/rabbitmq/certs/ca_certificate.pem\nssl_options.certfile = /opt/bitnami/rabbitmq/certs/server_certificate.pem\nssl_options.keyfile = /opt/bitnami/rabbitmq/certs/server_key.pem\n{{- end }}\n{{- if .Values.ldap.enabled }}\nauth_backends.1 = rabbit_auth_backend_ldap\nauth_backends.2 = internal\n{{- range $index, $server := .Values.ldap.servers }}\nauth_ldap.servers.{{ add $index 1 }} = {{ $server }}\n{{- end }}\nauth_ldap.port = {{ .Values.ldap.port }}\nauth_ldap.user_dn_pattern = {{ .Values.ldap.user_dn_pattern  }}\n{{- if .Values.ldap.tls.enabled }}\nauth_ldap.use_ssl = true\n{{- end }}\n{{- end }}\n{{- if .Values.metrics.enabled }}\n## Prometheus metrics\n##\nprometheus.tcp.port = 9419\n{{- end }}\n{{- if .Values.memoryHighWatermark.enabled }}\n## Memory Threshold\n##\ntotal_memory_available_override_value = {{ include \"rabbitmq.toBytes\" .Values.resources.limits.memory }}\nvm_memory_high_watermark.{{ .Values.memoryHighWatermark.type }} = {{ .Values.memoryHighWatermark.value }}\n{{- end }}","containerSecurityContext":{},"customLivenessProbe":{},"customReadinessProbe":{},"customStartupProbe":{},"diagnosticMode":{"args":["infinity"],"command":["sleep"],"enabled":false},"extraConfiguration":"load_definitions = /app/xlr-load_definition.json\nraft.wal_max_size_bytes = 1048576\n","extraContainerPorts":[],"extraDeploy":[],"extraEnvVars":[],"extraEnvVarsCM":"","extraEnvVarsSecret":"","extraPlugins":"rabbitmq_amqp1_0","extraSecrets":{"xlr-load-definition":{"xlr-load_definition.json":"{\n\"users\": [\n  {\n      \"name\": \"{{ .Values.auth.username }}\",\n      \"password\": \"{{ .Values.auth.password }}\",\n      \"tags\": \"administrator\"\n  }\n  ],\n\"vhosts\": [\n  {\n    \"name\": \"/\"\n  }\n  ],\n  \"permissions\": [\n  {\n    \"user\": \"{{ .Values.auth.username }}\",\n    \"vhost\": \"/\",\n    \"configure\": \".*\",\n    \"write\": \".*\",\n    \"read\": \".*\"\n  }\n  ],\n\"global_parameters\": [\n  {\n    \"name\": \"cluster_name\",\n    \"value\": \"\"\n  }\n  ],\n \"policies\": [\n    {\n      \"name\": \"ha-all\",\n      \"apply-to\": \"all\",\n      \"pattern\": \".*\",\n      \"vhost\": \"/\",\n      \"definition\": {\n        \"ha-mode\": \"all\",\n        \"ha-sync-mode\": \"automatic\",\n        \"ha-sync-batch-size\": 1\n      }\n    }\n  ]\n}\n"}},"extraSecretsPrependReleaseName":false,"extraVolumeMounts":[],"extraVolumes":[],"fullnameOverride":"","global":{"imagePullSecrets":[],"imageRegistry":"","storageClass":""},"hostAliases":[],"image":{"debug":false,"pullPolicy":"IfNotPresent","pullSecrets":[],"registry":"docker.io","repository":"bitnami/rabbitmq","tag":"3.9.8-debian-10-r6"},"ingress":{"annotations":{},"enabled":false,"extraHosts":[],"extraTls":[],"hostname":"rabbitmq.local","ingressClassName":"","path":"/","pathType":"ImplementationSpecific","secrets":[],"selfSigned":false,"tls":false},"initContainers":[],"install":true,"kubeVersion":"","ldap":{"enabled":false,"port":"389","servers":[],"tls":{"enabled":false},"user_dn_pattern":"cn=${username},dc=example,dc=org"},"livenessProbe":{"enabled":true,"failureThreshold":6,"initialDelaySeconds":120,"periodSeconds":30,"successThreshold":1,"timeoutSeconds":20},"loadDefinition":{"enabled":true,"existingSecret":"xlr-load-definition"},"logs":"-","maxAvailableSchedulers":"","memoryHighWatermark":{"enabled":false,"type":"relative","value":0.4},"metrics":{"enabled":false,"plugins":"rabbitmq_prometheus","podAnnotations":{"prometheus.io/port":"{{ .Values.service.metricsPort }}","prometheus.io/scrape":"true"},"prometheusRule":{"additionalLabels":{},"enabled":false,"namespace":"","rules":[]},"serviceMonitor":{"additionalLabels":{},"enabled":false,"honorLabels":false,"interval":"30s","namespace":"","path":"","podTargetLabels":{},"relabellings":[],"scrapeTimeout":"","targetLabels":{}}},"nameOverride":"","networkPolicy":{"additionalRules":[],"allowExternal":true,"enabled":false},"nodeAffinityPreset":{"key":"","type":"","values":[]},"nodeSelector":{},"onlineSchedulers":"","pdb":{"create":false,"maxUnavailable":"","minAvailable":1},"persistence":{"accessMode":"ReadWriteOnce","annotations":{},"enabled":true,"existingClaim":"","selector":{},"size":"1Gi","storageClass":"default","volumes":[]},"plugins":"rabbitmq_management rabbitmq_peer_discovery_k8s","podAffinityPreset":"","podAnnotations":{},"podAntiAffinityPreset":"soft","podLabels":{},"podManagementPolicy":"Parallel","podSecurityContext":{"enabled":true,"fsGroup":1001,"runAsUser":1001},"priorityClassName":"","rbac":{"create":true},"readinessProbe":{"enabled":true,"failureThreshold":3,"initialDelaySeconds":10,"periodSeconds":30,"successThreshold":1,"timeoutSeconds":20},"replicaCount":1,"resources":{"limits":{},"requests":{}},"schedulerName":"","service":{"annotations":{},"annotationsHeadless":{},"distNodePort":"","distPort":25672,"distPortName":"dist","epmdNodePort":"","epmdPortName":"epmd","externalIPs":[],"externalTrafficPolicy":"Cluster","extraPorts":[],"labels":{},"loadBalancerIP":"","loadBalancerSourceRanges":[],"managerNodePort":"","managerPort":15672,"managerPortEnabled":true,"managerPortName":"http-stats","metricsNodePort":"","metricsPort":9419,"metricsPortName":"metrics","nodePort":"","port":5672,"portEnabled":true,"portName":"amqp","tlsNodePort":"","tlsPort":5671,"tlsPortName":"amqp-ssl","type":"ClusterIP"},"serviceAccount":{"automountServiceAccountToken":true,"create":true,"name":""},"sidecars":[],"statefulsetLabels":{},"terminationGracePeriodSeconds":120,"tolerations":[],"topologySpreadConstraints":[],"ulimitNofiles":"65536","updateStrategyType":"RollingUpdate","volumePermissions":{"enabled":true,"image":{"pullPolicy":"IfNotPresent","pullSecrets":[],"registry":"docker.io","repository":"bitnami/bitnami-shell","tag":"10-debian-10-r233"},"resources":{"limits":{},"requests":{}}}},"release":{"configurationManagement":{"configuration":{"enabled":true,"resetFiles":["xl-release-license.lic","xlr-wrapper-linux.conf","jmx-exporter.yaml"]}}},"replicaCount":1,"resources":{},"tolerations":[],"xlrLicense":"LS0tIExpY2Vuc2UgLS0tCkxpY2Vuc2UgdmVyc2lvbjogMwpQcm9kdWN0OiBYTCBSZWxlYXNlCkxpY2Vuc2VkIHRvOiBYZWJpYUxhYnMKQ29udGFjdDogWGViaWFMYWJzIEludGVybmFsIFVzZSBPbmx5IDxpbmZvQHhlYmlhbGFicy5jb20+CkV4cGlyZXMgYWZ0ZXI6IDIwMzctMDEtMDEKU3VwcG9ydCBwb2xpY3k6IDh4NQpFZGl0aW9uOiBFbnRlcnByaXNlCi0tLSBTaWduYXR1cmUgKFNIQTF3aXRoRFNBKSAtLS0KMzAyZDAyMTQzN2ZkMjUwMjA5NTU1MDIzOTc2Mzk1NDVjZjZmYTQ5ZGE3NTE2NmMwMDIxNTAwOTEzZTlkZTc4YTk3MTE0OWU5OWVhOTk3YjYKNWE2ZGY1NDUzMTA5MDEKLS0tIEVuZCBvZiBTaWduYXR1cmUgLS0t"}}
    operator-sdk/primary-resource: /nginx-dai-xlr
    operator-sdk/primary-resource-type: IngressClass.networking.k8s.io
  creationTimestamp: "2023-08-25T15:32:44Z"
  generation: 1
  name: dai-xlr
  namespace: digitalai
  resourceVersion: "56105"
  uid: aba289b8-2d57-4100-bc4e-080e2a42ee3a
spec:
  AdminPassword: giladmin
  ForceRemoveMissingTypes: false
  GenerateXlConfig: true
  HealthPeriodScans: 10
  HealthProbeFailureThreshold: 12
  HealthProbes: true
  HealthProbesLivenessTimeout: 60
  HealthProbesReadinessTimeout: 60
  ImagePullPolicy: Always
  ImageRepository: xebialabs/xl-release
  ImageTag: 23.1.0
  K8sSetup:
    Platform: AzureAKS
  KeystorePassphrase: giladmin
  MetricsEnabled: false
  Persistence:
    AccessMode: ReadWriteOnce
    Annotations:
      helm.sh/resource-policy: keep
    Enabled: true
    Size: 1Gi
    StorageClass: default
  RepositoryKeystore: zs7OzgAAAAIAAAABAAAAAwAWZGVwbG95aXQtcGFzc3N3b3JkLWtleQAAAYotU2SkrO0ABXNyADNjb20uc3VuLmNyeXB0by5wcm92aWRlci5TZWFsZWRPYmplY3RGb3JLZXlQcm90ZWN0b3LNV8pZ5zC7UwIAAHhyABlqYXZheC5jcnlwdG8uU2VhbGVkT2JqZWN0PjY9psO3VHACAARbAA1lbmNvZGVkUGFyYW1zdAACW0JbABBlbmNyeXB0ZWRDb250ZW50cQB+AAJMAAlwYXJhbXNBbGd0ABJMamF2YS9sYW5nL1N0cmluZztMAAdzZWFsQWxncQB+AAN4cHVyAAJbQqzzF/gGCFTgAgAAeHAAAAARMA8ECAwtgD4ULc0RAgMDDUB1cQB+AAUAAACQP7w+ndxFVr3/bjTZWfBSSFxhsHK15b63fkYvkuATwUeyvbRRxfJlRTjqKzm686eOuDXv6sFeRGX2VdBXxEZFBO5axwgcHuHZTkH5BUd3MiUiKm+2BNTyPNte++pTMQNqQd7pReK/3qqzJW9Zn8s19mpvIW24RZKYCr8wAn25qB9R+qyRWYyO9oPGTATOdN/RdAAWUEJFV2l0aE1ENUFuZFRyaXBsZURFU3QAFlBCRVdpdGhNRDVBbmRUcmlwbGVERVPK8J5V4MXNfb/A8pT1TubsIiIDiA==
  TinyToolsImageRepository: xebialabs/tiny-tools
  TinyToolsImageTag: 22.2.0
  UseExistingDB:
    Enabled: false
  UseExistingMQ:
    Enabled: false
  UseIpAsHostname: false
  affinity: {}
  haproxy-ingress:
    controller:
      affinity: {}
      autoscaling:
        customMetrics: []
        enabled: false
      config: {}
      daemonset:
        hostPorts:
          http: 80
          https: 443
          tcp: []
        useHostPort: false
      defaultBackendService: ""
      dnsPolicy: ClusterFirst
      enableStaticPorts: true
      extraArgs: {}
      extraContainers: []
      extraEnvs: []
      extraVolumeMounts: []
      extraVolumes: []
      haproxy:
        enabled: false
        extraArgs: {}
        image:
          pullPolicy: IfNotPresent
          repository: haproxy
          tag: 2.3.14-alpine
        resources: {}
      healthzPort: 10253
      hostNetwork: false
      image:
        pullPolicy: IfNotPresent
        repository: quay.io/jcmoraisjr/haproxy-ingress
        tag: v0.13.4
      imagePullSecrets: []
      ingressClass: haproxy-dai-xlr
      initContainers: []
      kind: Deployment
      lifecycle: {}
      livenessProbe:
        failureThreshold: 3
        initialDelaySeconds: 10
        path: /healthz
        periodSeconds: 10
        port: 10253
        successThreshold: 1
        timeoutSeconds: 1
      logs:
        enabled: false
        extraVolumeMounts: []
        image:
          pullPolicy: IfNotPresent
          repository: whereisaaron/kube-syslog-sidecar
          tag: latest
        resources: {}
      metrics:
        controllerPort: 10254
        embedded: true
        enabled: false
        extraArgs: {}
        image:
          pullPolicy: IfNotPresent
          repository: quay.io/prometheus/haproxy-exporter
          tag: v0.11.0
        port: 9101
        resources: {}
        service:
          annotations: {}
          clusterIP: ""
          externalIPs: []
          loadBalancerIP: ""
          loadBalancerSourceRanges: []
          serviceControllerPort: 10254
          servicePort: 9101
          type: ClusterIP
      minAvailable: 1
      minReadySeconds: 0
      nodeSelector: {}
      podAffinity: {}
      podAnnotations: {}
      podLabels: {}
      priorityClassName: ""
      readinessProbe:
        failureThreshold: 3
        initialDelaySeconds: 10
        path: /healthz
        periodSeconds: 10
        port: 10253
        successThreshold: 1
        timeoutSeconds: 1
      replicaCount: 1
      resources: {}
      securityContext: {}
      service:
        annotations: {}
        clusterIP: ""
        clusterIPs: []
        externalIPs: []
        externalTrafficPolicy: Local
        extraPorts: []
        healthCheckNodePort: 0
        httpPorts:
        - port: 80
          targetPort: http
        httpsPorts:
        - port: 443
          targetPort: https
        labels: {}
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        type: LoadBalancer
      serviceMonitor:
        annotations: {}
        enabled: false
        honorLabels: true
        interval: 10s
        labels: {}
      stats:
        enabled: false
        port: 1936
        service:
          annotations: {}
          clusterIP: ""
          externalIPs: []
          loadBalancerIP: ""
          loadBalancerSourceRanges: []
          servicePort: 1936
          type: ClusterIP
      tcp: {}
      template: ""
      terminationGracePeriodSeconds: 60
      tolerations: []
      updateStrategy:
        rollingUpdate:
          maxUnavailable: 1
        type: RollingUpdate
    defaultBackend:
      affinity: {}
      enabled: false
      image:
        pullPolicy: IfNotPresent
        repository: k8s.gcr.io/defaultbackend-amd64
        tag: "1.5"
      minAvailable: 1
      name: default-backend
      nodeSelector: {}
      podAnnotations: {}
      podLabels: {}
      replicaCount: 1
      resources:
        limits:
          cpu: 10m
          memory: 20Mi
      securityContext: {}
      service:
        annotations: {}
        clusterIP: ""
        externalIPs: []
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        name: ingress-default-backend
        servicePort: 8080
        type: ClusterIP
      tolerations: []
    fullnameOverride: ""
    global: {}
    install: false
    nameOverride: ""
    rbac:
      create: true
      secret:
        write: false
      security:
        enable: false
    serviceAccount:
      create: true
      name: null
  ingress:
    Enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx-dai-xlr
      nginx.ingress.kubernetes.io/affinity: cookie
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
      nginx.ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/session-cookie-name: JSESSIONID
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
    hosts:
    - giltest.com
    path: /
  keycloak:
    affinity: |
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                {{- include "keycloak.selectorLabels" . | nindent 10 }}
              matchExpressions:
                - key: app.kubernetes.io/component
                  operator: NotIn
                  values:
                    - test
            topologyKey: kubernetes.io/hostname
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  {{- include "keycloak.selectorLabels" . | nindent 12 }}
                matchExpressions:
                  - key: app.kubernetes.io/component
                    operator: NotIn
                    values:
                      - test
              topologyKey: failure-domain.beta.kubernetes.io/zone
    args: []
    autoscaling:
      behavior:
        scaleDown:
          policies:
          - periodSeconds: 300
            type: Pods
            value: 1
          stabilizationWindowSeconds: 300
      enabled: false
      labels: {}
      maxReplicas: 10
      metrics:
      - resource:
          name: cpu
          target:
            averageUtilization: 80
            type: Utilization
        type: Resource
      minReplicas: 3
    clusterDomain: cluster.local
    command: []
    enableServiceLinks: true
    extraContainers: ""
    extraEnv: |
      - name: PROXY_ADDRESS_FORWARDING
        value: "true"
      - name: KEYCLOAK_USER
        value: admin
      - name: KEYCLOAK_PASSWORD
        value: admin
      - name: JGROUPS_DISCOVERY_PROTOCOL
        value: dns.DNS_PING
      - name: JGROUPS_DISCOVERY_PROPERTIES
        value: 'dns_query={{ include "keycloak.serviceDnsName" . }}'
      - name: CACHE_OWNERS_COUNT
        value: "2"
      - name: CACHE_OWNERS_AUTH_SESSIONS_COUNT
        value: "2"
      - name: JAVA_OPTS
        value: >-
          -XX:+UseContainerSupport
          -XX:MaxRAMPercentage=50.0
          -Djava.net.preferIPv4Stack=true
          -Djboss.modules.system.pkgs=$JBOSS_MODULES_SYSTEM_PKGS
          -Djava.awt.headless=true
      - name: DB_VENDOR
        value: postgres
      - name: DB_ADDR
        value: {{ .Release.Name }}-postgresql
      - name: DB_PORT
        value: "5432"
      - name: DB_DATABASE
        value: keycloak
      - name: DB_USER
        value: keycloak
      - name: DB_PASSWORD
        value: keycloak
      - name: KEYCLOAK_IMPORT
        value: /realm/digitalai-platform-realm.json
    extraEnvFrom: ""
    extraInitContainers: ""
    extraPorts: []
    extraServiceMonitor:
      annotations: {}
      enabled: false
      interval: 10s
      labels: {}
      namespace: ""
      namespaceSelector: {}
      path: /auth/realms/master/metrics
      port: http
      scrapeTimeout: 10s
    extraVolumeMounts: |
      - name: realm-config
        mountPath: "/realm/"
        readOnly: true
    extraVolumes: |
      - name: realm-config
        configMap:
          name: {{ .Release.Name }}-realm
    fullnameOverride: ""
    global: {}
    hostAliases: []
    image:
      pullPolicy: IfNotPresent
      repository: docker.io/jboss/keycloak
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations:
        kubernetes.io/ingress.class: nginx-dai-xlr
        nginx.ingress.kubernetes.io/ssl-redirect: "false"
      console:
        annotations: {}
        enabled: false
        ingressClassName: ""
        rules:
        - host: null
          paths:
          - path: /auth/admin/
            pathType: Prefix
      enabled: true
      ingressClassName: ""
      labels: {}
      rules:
      - host: null
        paths:
        - path: /
          pathType: Prefix
      servicePort: http
      tls: []
    install: false
    lifecycleHooks: ""
    livenessProbe: |
      httpGet:
        path: /auth/
        port: http
      initialDelaySeconds: 0
      timeoutSeconds: 5
    nameOverride: ""
    networkPolicy:
      enabled: false
      extraFrom: []
      labels: {}
    nodeSelector: {}
    pgchecker:
      image:
        pullPolicy: IfNotPresent
        repository: docker.io/busybox
        tag: 1.32
      resources:
        limits:
          cpu: 20m
          memory: 32Mi
        requests:
          cpu: 20m
          memory: 32Mi
      securityContext:
        allowPrivilegeEscalation: false
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
    podAnnotations: {}
    podDisruptionBudget: {}
    podLabels: {}
    podManagementPolicy: Parallel
    podSecurityContext:
      fsGroup: 1000
    postgresql:
      audit:
        clientMinMessages: error
        logConnections: false
        logDisconnections: false
        logHostname: false
        logLinePrefix: ""
        logTimezone: ""
        pgAuditLog: ""
        pgAuditLogCatalog: "off"
      common:
        exampleValue: common-chart
        global:
          postgresql: {}
      commonAnnotations: {}
      containerSecurityContext:
        enabled: true
        runAsUser: 1001
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      enabled: false
      extraDeploy: []
      extraEnv: []
      global:
        postgresql: {}
      image:
        debug: false
        pullPolicy: IfNotPresent
        registry: docker.io
        repository: bitnami/postgresql
        tag: 11.11.0-debian-10-r31
      ldap:
        baseDN: ""
        bind_password: null
        bindDN: ""
        enabled: false
        port: ""
        prefix: ""
        scheme: ""
        search_attr: ""
        search_filter: ""
        server: ""
        suffix: ""
        tls: {}
        url: ""
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      metrics:
        enabled: false
        extraEnvVars: {}
        image:
          pullPolicy: IfNotPresent
          registry: docker.io
          repository: bitnami/postgres-exporter
          tag: 0.9.0-debian-10-r6
        livenessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        prometheusRule:
          additionalLabels: {}
          enabled: false
          namespace: ""
          rules: []
        readinessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        securityContext:
          enabled: false
          runAsUser: 1001
        service:
          annotations:
            prometheus.io/port: "9187"
            prometheus.io/scrape: "true"
          loadBalancerIP: null
          type: ClusterIP
        serviceMonitor:
          additionalLabels: {}
          enabled: false
      networkPolicy:
        allowExternal: true
        enabled: false
        explicitNamespacesSelector: {}
      persistence:
        accessModes:
        - ReadWriteOnce
        annotations: {}
        enabled: true
        mountPath: /bitnami/postgresql
        selector: {}
        size: 1Gi
        subPath: ""
      postgresqlDataDir: /bitnami/postgresql/data
      postgresqlDatabase: keycloak
      postgresqlDbUserConnectionLimit: null
      postgresqlMaxConnections: null
      postgresqlPassword: keycloak
      postgresqlPghbaRemoveFilters: null
      postgresqlPostgresConnectionLimit: null
      postgresqlSharedPreloadLibraries: pgaudit
      postgresqlStatementTimeout: null
      postgresqlTcpKeepalivesCount: null
      postgresqlTcpKeepalivesIdle: null
      postgresqlTcpKeepalivesInterval: null
      postgresqlUsername: keycloak
      primary:
        affinity: {}
        annotations: {}
        extraInitContainers: []
        extraVolumeMounts: []
        extraVolumes: []
        labels: {}
        nodeAffinityPreset:
          key: ""
          type: ""
          values: []
        nodeSelector: {}
        podAffinityPreset: ""
        podAnnotations: {}
        podAntiAffinityPreset: soft
        podLabels: {}
        priorityClassName: ""
        service: {}
        sidecars: []
        tolerations: []
      primaryAsStandBy:
        enabled: false
      psp:
        create: false
      rbac:
        create: false
      readReplicas:
        affinity: {}
        annotations: {}
        extraInitContainers: []
        extraVolumeMounts: []
        extraVolumes: []
        labels: {}
        nodeAffinityPreset:
          key: ""
          type: ""
          values: []
        nodeSelector: {}
        persistence:
          enabled: true
        podAffinityPreset: ""
        podAnnotations: {}
        podAntiAffinityPreset: soft
        podLabels: {}
        priorityClassName: ""
        resources: {}
        service: {}
        sidecars: []
        tolerations: []
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      replication:
        applicationName: my_application
        enabled: false
        numSynchronousReplicas: 0
        password: repl_password
        readReplicas: 1
        synchronousCommit: "off"
        user: repl_user
      resources:
        requests:
          cpu: 250m
          memory: 256Mi
      securityContext:
        enabled: true
        fsGroup: 1001
      service:
        annotations: {}
        port: 5432
        type: ClusterIP
      serviceAccount:
        enabled: false
      shmVolume:
        chmod:
          enabled: true
        enabled: true
      startupProbe:
        enabled: false
        failureThreshold: 10
        initialDelaySeconds: 30
        periodSeconds: 15
        successThreshold: 1
        timeoutSeconds: 5
      tls:
        certCAFilename: null
        certFilename: ""
        certKeyFilename: ""
        certificatesSecret: ""
        crlFilename: null
        enabled: false
        preferServerCiphers: true
      updateStrategy:
        type: RollingUpdate
      volumePermissions:
        enabled: false
        image:
          pullPolicy: Always
          registry: docker.io
          repository: bitnami/bitnami-shell
          tag: "10"
        securityContext:
          runAsUser: 0
    priorityClassName: ""
    prometheusRule:
      annotations: {}
      enabled: false
      labels: {}
      rules: []
    rbac:
      create: false
      rules: []
    readinessProbe: |
      httpGet:
        path: /auth/realms/master
        port: http
      initialDelaySeconds: 30
      timeoutSeconds: 1
    replicas: 1
    resources: {}
    restartPolicy: Always
    route:
      annotations: {}
      enabled: false
      host: ""
      labels: {}
      path: /
      tls:
        enabled: true
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
    secrets: {}
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
    service:
      annotations: {}
      externalTrafficPolicy: Cluster
      extraPorts: []
      httpManagementPort: 9990
      httpPort: 80
      httpsPort: 8443
      labels: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      sessionAffinity: ""
      sessionAffinityConfig: {}
      type: LoadBalancer
    serviceAccount:
      annotations: {}
      create: true
      imagePullSecrets: []
      labels: {}
      name: ""
    serviceMonitor:
      annotations: {}
      enabled: false
      interval: 10s
      labels: {}
      namespace: ""
      namespaceSelector: {}
      path: /metrics
      port: http-management
      scrapeTimeout: 10s
    startupProbe: |
      httpGet:
        path: /auth/
        port: http
      initialDelaySeconds: 30
      timeoutSeconds: 1
      failureThreshold: 60
      periodSeconds: 5
    startupScripts:
      keycloak.cli: |
        {{- .Files.Get "scripts/keycloak.cli" }}
    statefulsetAnnotations: {}
    statefulsetLabels: {}
    terminationGracePeriodSeconds: 60
    test:
      enabled: false
      image:
        pullPolicy: IfNotPresent
        repository: docker.io/unguiculus/docker-python3-phantomjs-selenium
        tag: v1
      podSecurityContext:
        fsGroup: 1000
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
    tolerations: []
    topologySpreadConstraints: null
  nginx-ingress-controller:
    addHeaders: {}
    affinity: {}
    args: []
    autoscaling:
      enabled: false
      maxReplicas: 11
      minReplicas: 1
      targetCPU: ""
      targetMemory: ""
    command: []
    common:
      exampleValue: common-chart
      global:
        imagePullSecrets: []
        imageRegistry: ""
    commonAnnotations: {}
    commonLabels: {}
    config: {}
    configMapNamespace: ""
    containerPorts:
      http: 80
      https: 443
      metrics: 10254
    containerSecurityContext:
      allowPrivilegeEscalation: true
      capabilities:
        add:
        - NET_BIND_SERVICE
        drop:
        - ALL
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customTemplate:
      configMapKey: ""
      configMapName: ""
    daemonset:
      hostPorts:
        http: 80
        https: 443
      useHostPort: false
    defaultBackend:
      affinity: {}
      containerPort: 8080
      containerSecurityContext:
        enabled: true
        runAsUser: 1001
      enabled: true
      extraArgs: {}
      hostAliases: []
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/nginx
        tag: 1.21.3-debian-10-r48
      livenessProbe:
        enabled: true
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: http
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      pdb:
        create: false
        maxUnavailable: ""
        minAvailable: 1
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      podSecurityContext:
        enabled: true
        fsGroup: 1001
      priorityClassName: ""
      readinessProbe:
        enabled: true
        failureThreshold: 6
        httpGet:
          path: /healthz
          port: http
          scheme: HTTP
        initialDelaySeconds: 0
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 5
      replicaCount: 1
      resources:
        limits: {}
        requests: {}
      serverBlockConfig: |-
        location /healthz {
          return 200;
        }

        location / {
          return 404;
        }
      service:
        port: 80
        type: ClusterIP
      tolerations: []
    defaultBackendService: ""
    dhParam: ""
    dnsPolicy: ClusterFirst
    electionID: ingress-controller-leader
    extraArgs:
      ingress-class: nginx-dai-xlr
    extraDeploy: []
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    fullnameOverride: ""
    global:
      imagePullSecrets: []
      imageRegistry: ""
    hostAliases: []
    hostNetwork: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/nginx-ingress-controller
      tag: 1.0.4-debian-10-r13
    ingressClassResource:
      controllerClass: k8s.io/ingress-nginx-dai-xlr
      default: false
      enabled: true
      name: nginx-dai-xlr
      parameters: {}
    initContainers: []
    install: true
    kind: Deployment
    lifecycle: {}
    livenessProbe:
      enabled: true
      failureThreshold: 3
      httpGet:
        path: /healthz
        port: 10254
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    maxmindLicenseKey: ""
    metrics:
      enabled: false
      prometheusRule:
        additionalLabels: {}
        enabled: false
        namespace: ""
        rules: []
      service:
        annotations:
          prometheus.io/port: '{{ .Values.metrics.service.port }}'
          prometheus.io/scrape: "true"
        port: 9913
        type: ClusterIP
      serviceMonitor:
        enabled: false
        interval: 30s
        namespace: ""
        scrapeTimeout: ""
        selector: {}
    minReadySeconds: 0
    nameOverride: ""
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    podSecurityPolicy:
      enabled: false
    priorityClassName: ""
    proxySetHeaders: {}
    publishService:
      enabled: false
      pathOverride: ""
    rbac:
      create: true
    readinessProbe:
      enabled: true
      failureThreshold: 3
      httpGet:
        path: /healthz
        port: 10254
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    replicaCount: 1
    reportNodeInternalIp: false
    resources:
      limits: {}
      requests: {}
    revisionHistoryLimit: 10
    scope:
      enabled: false
    service:
      annotations: {}
      clusterIP: ""
      externalIPs: []
      externalTrafficPolicy: ""
      healthCheckNodePort: 0
      labels: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        http: ""
        https: ""
        tcp: {}
        udp: {}
      ports:
        http: 80
        https: 443
      targetPorts:
        http: http
        https: https
      type: LoadBalancer
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    sidecars: []
    tcp: {}
    tcpConfigMapNamespace: ""
    terminationGracePeriodSeconds: 60
    tolerations: []
    topologySpreadConstraints: []
    udp: {}
    udpConfigMapNamespace: ""
    updateStrategy: {}
    watchIngressWithoutClass: false
  nodeSelector: {}
  oidc:
    enabled: false
    external: false
  postgresql:
    audit:
      clientMinMessages: error
      logConnections: false
      logDisconnections: false
      logHostname: false
      logLinePrefix: ""
      logTimezone: ""
      pgAuditLog: ""
      pgAuditLogCatalog: "off"
    common:
      exampleValue: common-chart
      global:
        imagePullSecrets: []
        imageRegistry: ""
        postgresql:
          existingSecret: ""
          postgresqlDatabase: ""
          postgresqlPassword: ""
          postgresqlUsername: ""
          replicationPassword: ""
          servicePort: ""
        storageClass: ""
    commonAnnotations: {}
    configurationConfigMap: ""
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    diagnosticMode:
      args:
      - infinity
      command:
      - sleep
      enabled: false
    existingSecret: ""
    extendedConfConfigMap: ""
    extraDeploy: []
    extraEnv: []
    extraEnvVarsCM: ""
    fullnameOverride: ""
    global:
      imagePullSecrets: []
      imageRegistry: ""
      postgresql:
        existingSecret: ""
        postgresqlDatabase: ""
        postgresqlPassword: postgres
        postgresqlUsername: ""
        replicationPassword: ""
        servicePort: ""
      storageClass: ""
    image:
      debug: false
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/postgresql
      tag: 11.13.0-debian-10-r73
    initdbPassword: ""
    initdbScripts: {}
    initdbScriptsConfigMap: ""
    initdbScriptsSecret: postgresql-init-sql-xlr
    initdbUser: ""
    install: true
    ldap:
      baseDN: ""
      bind_password: ""
      bindDN: ""
      enabled: false
      port: ""
      prefix: ""
      scheme: ""
      search_attr: ""
      search_filter: ""
      server: ""
      suffix: ""
      tls: ""
      url: ""
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    metrics:
      customMetrics: {}
      enabled: false
      extraEnvVars: []
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/postgres-exporter
        tag: 0.10.0-debian-10-r101
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      prometheusRule:
        additionalLabels: {}
        enabled: false
        namespace: ""
        rules: []
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        enabled: false
        runAsUser: 1001
      service:
        annotations:
          prometheus.io/port: "9187"
          prometheus.io/scrape: "true"
        loadBalancerIP: ""
        type: ClusterIP
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        interval: ""
        metricRelabelings: []
        namespace: ""
        relabelings: []
        scrapeTimeout: ""
    nameOverride: ""
    networkPolicy:
      allowExternal: true
      enabled: false
      explicitNamespacesSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: ""
      mountPath: /bitnami/postgresql
      selector: {}
      size: 1Gi
      storageClass: default
      subPath: ""
    pgHbaConfiguration: ""
    postgresqlConfiguration: {}
    postgresqlDataDir: /bitnami/postgresql/data
    postgresqlDatabase: ""
    postgresqlDbUserConnectionLimit: ""
    postgresqlExtendedConf: {}
    postgresqlInitdbArgs: ""
    postgresqlInitdbWalDir: ""
    postgresqlMaxConnections: "150"
    postgresqlPassword: postgres
    postgresqlPghbaRemoveFilters: ""
    postgresqlPostgresConnectionLimit: ""
    postgresqlPostgresPassword: ""
    postgresqlSharedPreloadLibraries: pgaudit
    postgresqlStatementTimeout: ""
    postgresqlTcpKeepalivesCount: ""
    postgresqlTcpKeepalivesIdle: ""
    postgresqlTcpKeepalivesInterval: ""
    postgresqlUsername: postgres
    primary:
      affinity: {}
      annotations: {}
      extraInitContainers: []
      extraPodSpec: {}
      extraVolumeMounts: []
      extraVolumes: []
      labels: {}
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      priorityClassName: ""
      service:
        clusterIP: ""
        nodePort: ""
        type: ""
      sidecars: []
      tolerations: []
    primaryAsStandBy:
      enabled: false
      primaryHost: ""
      primaryPort: ""
    psp:
      create: false
    rbac:
      create: false
    readReplicas:
      affinity: {}
      annotations: {}
      extraInitContainers: []
      extraPodSpec: {}
      extraVolumeMounts: []
      extraVolumes: []
      labels: {}
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      persistence:
        enabled: true
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      priorityClassName: ""
      resources: {}
      service:
        clusterIP: ""
        nodePort: ""
        type: ""
      sidecars: []
      tolerations: []
      topologySpreadConstraints: []
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replication:
      applicationName: my_application
      enabled: false
      numSynchronousReplicas: 0
      password: repl_password
      readReplicas: 1
      singleService: true
      synchronousCommit: "off"
      uniqueServices: false
      user: repl_user
    resources:
      requests:
        cpu: 250m
        memory: 256Mi
    schedulerName: ""
    securityContext:
      enabled: true
      fsGroup: 1001
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePort: ""
      port: 5432
      type: ClusterIP
    serviceAccount:
      autoMount: false
      enabled: false
      name: ""
    shmVolume:
      chmod:
        enabled: true
      enabled: true
      sizeLimit: ""
    startupProbe:
      enabled: false
      failureThreshold: 10
      initialDelaySeconds: 30
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: ""
    tls:
      autoGenerated: false
      certCAFilename: ""
      certFilename: ""
      certKeyFilename: ""
      certificatesSecret: ""
      crlFilename: ""
      enabled: false
      preferServerCiphers: true
    updateStrategy:
      type: RollingUpdate
    usePasswordFile: false
    volumePermissions:
      enabled: false
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/bitnami-shell
        tag: 10-debian-10-r233
      securityContext:
        runAsUser: 0
  rabbitmq:
    advancedConfiguration: ""
    affinity: {}
    args: []
    auth:
      erlangCookie: RELEASERABBITMQCLUSTER
      existingErlangSecret: ""
      existingPasswordSecret: ""
      password: guest
      tls:
        autoGenerated: false
        caCertificate: ""
        enabled: false
        existingSecret: ""
        existingSecretFullChain: false
        failIfNoPeerCert: true
        serverCertificate: ""
        serverKey: ""
        sslOptionsVerify: verify_peer
      username: guest
    clusterDomain: cluster.local
    clustering:
      addressType: hostname
      enabled: true
      forceBoot: true
      partitionHandling: autoheal
      rebalance: false
    command: []
    common:
      exampleValue: common-chart
      global:
        imagePullSecrets: []
        imageRegistry: ""
        storageClass: ""
    commonAnnotations: {}
    communityPlugins: ""
    configuration: |-
      {{- if not .Values.loadDefinition.enabled -}}
      ## Username and password
      ##
      default_user = {{ .Values.auth.username }}
      default_pass = CHANGEME
      {{- end }}
      {{- if .Values.clustering.enabled }}
      ## Clustering
      ##
      cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
      cluster_formation.k8s.host = kubernetes.default.svc.{{ .Values.clusterDomain }}
      cluster_formation.node_cleanup.interval = 10
      cluster_formation.node_cleanup.only_log_warning = true
      cluster_partition_handling = {{ .Values.clustering.partitionHandling }}
      {{- end }}
      # queue master locator
      queue_master_locator = min-masters
      # enable guest user
      loopback_users.guest = false
      {{ tpl .Values.extraConfiguration . }}
      {{- if .Values.auth.tls.enabled }}
      ssl_options.verify = {{ .Values.auth.tls.sslOptionsVerify }}
      listeners.ssl.default = {{ .Values.service.tlsPort }}
      ssl_options.fail_if_no_peer_cert = {{ .Values.auth.tls.failIfNoPeerCert }}
      ssl_options.cacertfile = /opt/bitnami/rabbitmq/certs/ca_certificate.pem
      ssl_options.certfile = /opt/bitnami/rabbitmq/certs/server_certificate.pem
      ssl_options.keyfile = /opt/bitnami/rabbitmq/certs/server_key.pem
      {{- end }}
      {{- if .Values.ldap.enabled }}
      auth_backends.1 = rabbit_auth_backend_ldap
      auth_backends.2 = internal
      {{- range $index, $server := .Values.ldap.servers }}
      auth_ldap.servers.{{ add $index 1 }} = {{ $server }}
      {{- end }}
      auth_ldap.port = {{ .Values.ldap.port }}
      auth_ldap.user_dn_pattern = {{ .Values.ldap.user_dn_pattern  }}
      {{- if .Values.ldap.tls.enabled }}
      auth_ldap.use_ssl = true
      {{- end }}
      {{- end }}
      {{- if .Values.metrics.enabled }}
      ## Prometheus metrics
      ##
      prometheus.tcp.port = 9419
      {{- end }}
      {{- if .Values.memoryHighWatermark.enabled }}
      ## Memory Threshold
      ##
      total_memory_available_override_value = {{ include "rabbitmq.toBytes" .Values.resources.limits.memory }}
      vm_memory_high_watermark.{{ .Values.memoryHighWatermark.type }} = {{ .Values.memoryHighWatermark.value }}
      {{- end }}
    containerSecurityContext: {}
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    diagnosticMode:
      args:
      - infinity
      command:
      - sleep
      enabled: false
    extraConfiguration: |
      load_definitions = /app/xlr-load_definition.json
      raft.wal_max_size_bytes = 1048576
    extraContainerPorts: []
    extraDeploy: []
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraPlugins: rabbitmq_amqp1_0
    extraSecrets:
      xlr-load-definition:
        xlr-load_definition.json: |
          {
          "users": [
            {
                "name": "{{ .Values.auth.username }}",
                "password": "{{ .Values.auth.password }}",
                "tags": "administrator"
            }
            ],
          "vhosts": [
            {
              "name": "/"
            }
            ],
            "permissions": [
            {
              "user": "{{ .Values.auth.username }}",
              "vhost": "/",
              "configure": ".*",
              "write": ".*",
              "read": ".*"
            }
            ],
          "global_parameters": [
            {
              "name": "cluster_name",
              "value": ""
            }
            ],
           "policies": [
              {
                "name": "ha-all",
                "apply-to": "all",
                "pattern": ".*",
                "vhost": "/",
                "definition": {
                  "ha-mode": "all",
                  "ha-sync-mode": "automatic",
                  "ha-sync-batch-size": 1
                }
              }
            ]
          }
    extraSecretsPrependReleaseName: false
    extraVolumeMounts: []
    extraVolumes: []
    fullnameOverride: ""
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
    hostAliases: []
    image:
      debug: false
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/rabbitmq
      tag: 3.9.8-debian-10-r6
    ingress:
      annotations: {}
      enabled: false
      extraHosts: []
      extraTls: []
      hostname: rabbitmq.local
      ingressClassName: ""
      path: /
      pathType: ImplementationSpecific
      secrets: []
      selfSigned: false
      tls: false
    initContainers: []
    install: true
    kubeVersion: ""
    ldap:
      enabled: false
      port: "389"
      servers: []
      tls:
        enabled: false
      user_dn_pattern: cn=${username},dc=example,dc=org
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 120
      periodSeconds: 30
      successThreshold: 1
      timeoutSeconds: 20
    loadDefinition:
      enabled: true
      existingSecret: xlr-load-definition
    logs: '-'
    maxAvailableSchedulers: ""
    memoryHighWatermark:
      enabled: false
      type: relative
      value: 0.4
    metrics:
      enabled: false
      plugins: rabbitmq_prometheus
      podAnnotations:
        prometheus.io/port: '{{ .Values.service.metricsPort }}'
        prometheus.io/scrape: "true"
      prometheusRule:
        additionalLabels: {}
        enabled: false
        namespace: ""
        rules: []
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        honorLabels: false
        interval: 30s
        namespace: ""
        path: ""
        podTargetLabels: {}
        relabellings: []
        scrapeTimeout: ""
        targetLabels: {}
    nameOverride: ""
    networkPolicy:
      additionalRules: []
      allowExternal: true
      enabled: false
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    onlineSchedulers: ""
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    persistence:
      accessMode: ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: ""
      selector: {}
      size: 1Gi
      storageClass: default
      volumes: []
    plugins: rabbitmq_management rabbitmq_peer_discovery_k8s
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: Parallel
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
    priorityClassName: ""
    rbac:
      create: true
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 30
      successThreshold: 1
      timeoutSeconds: 20
    replicaCount: 1
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    service:
      annotations: {}
      annotationsHeadless: {}
      distNodePort: ""
      distPort: 25672
      distPortName: dist
      epmdNodePort: ""
      epmdPortName: epmd
      externalIPs: []
      externalTrafficPolicy: Cluster
      extraPorts: []
      labels: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      managerNodePort: ""
      managerPort: 15672
      managerPortEnabled: true
      managerPortName: http-stats
      metricsNodePort: ""
      metricsPort: 9419
      metricsPortName: metrics
      nodePort: ""
      port: 5672
      portEnabled: true
      portName: amqp
      tlsNodePort: ""
      tlsPort: 5671
      tlsPortName: amqp-ssl
      type: ClusterIP
    serviceAccount:
      automountServiceAccountToken: true
      create: true
      name: ""
    sidecars: []
    statefulsetLabels: {}
    terminationGracePeriodSeconds: 120
    tolerations: []
    topologySpreadConstraints: []
    ulimitNofiles: "65536"
    updateStrategyType: RollingUpdate
    volumePermissions:
      enabled: true
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/bitnami-shell
        tag: 10-debian-10-r233
      resources:
        limits: {}
        requests: {}
  release:
    configurationManagement:
      configuration:
        enabled: true
        resetFiles:
        - xl-release-license.lic
        - xlr-wrapper-linux.conf
        - jmx-exporter.yaml
  replicaCount: 1
  resources: {}
  tolerations: []
  xlrLicense: LS0tIExpY2Vuc2UgLS0tCkxpY2Vuc2UgdmVyc2lvbjogMwpQcm9kdWN0OiBYTCBSZWxlYXNlCkxpY2Vuc2VkIHRvOiBYZWJpYUxhYnMKQ29udGFjdDogWGViaWFMYWJzIEludGVybmFsIFVzZSBPbmx5IDxpbmZvQHhlYmlhbGFicy5jb20+CkV4cGlyZXMgYWZ0ZXI6IDIwMzctMDEtMDEKU3VwcG9ydCBwb2xpY3k6IDh4NQpFZGl0aW9uOiBFbnRlcnByaXNlCi0tLSBTaWduYXR1cmUgKFNIQTF3aXRoRFNBKSAtLS0KMzAyZDAyMTQzN2ZkMjUwMjA5NTU1MDIzOTc2Mzk1NDVjZjZmYTQ5ZGE3NTE2NmMwMDIxNTAwOTEzZTlkZTc4YTk3MTE0OWU5OWVhOTk3YjYKNWE2ZGY1NDUzMTA5MDEKLS0tIEVuZCBvZiBTaWduYXR1cmUgLS0t
status:
  conditions:
  - lastTransitionTime: "2023-08-25T15:32:50Z"
    status: "True"
    type: Initialized
  - lastTransitionTime: "2023-08-25T15:33:01Z"
    message: |
      ## To get the application URL, run:
      http://giltest.com/

      ## To get the admin password for xl-release, run:
      kubectl get secret --namespace digitalai dai-xlr-digitalai-release -o jsonpath="{.data.release-password}" | base64 --decode; echo

      ## To get the password for postgresql, run:
      kubectl get secret --namespace  digitalai dai-xlr-postgresql -o jsonpath="{.data.postgresql-password}" | base64 --decode; echo

      ## To get the password for rabbitMQ, run:
      kubectl get secret --namespace  digitalai dai-xlr-rabbitmq   -o jsonpath="{.data.rabbitmq-password}" | base64 --decode; echo
    reason: InstallSuccessful
    status: "True"
    type: Deployed
  deployedRelease:
    manifest: "---\n# Source: digitalai-release/charts/nginx-ingress-controller/templates/serviceaccount.yaml\napiVersion:
      v1\nkind: ServiceAccount\nmetadata:\n  name: dai-xlr-nginx-ingress-controller\n
      \ namespace: \"digitalai\"\n  labels:\n    app.kubernetes.io/name: nginx-ingress-controller\n
      \   helm.sh/chart: nginx-ingress-controller-9.2.0\n    app.kubernetes.io/instance:
      dai-xlr\n    app.kubernetes.io/managed-by: Helm\n  annotations:\nautomountServiceAccountToken:
      true\n---\n# Source: digitalai-release/charts/rabbitmq/templates/serviceaccount.yaml\napiVersion:
      v1\nkind: ServiceAccount\nmetadata:\n  name: dai-xlr-rabbitmq\n  namespace:
      \"digitalai\"\n  labels:\n    app.kubernetes.io/name: rabbitmq\n    helm.sh/chart:
      rabbitmq-8.26.1\n    app.kubernetes.io/instance: dai-xlr\n    app.kubernetes.io/managed-by:
      Helm\nautomountServiceAccountToken: true\nsecrets:\n  - name: dai-xlr-rabbitmq\n---\n#
      Source: digitalai-release/charts/postgresql/templates/secrets.yaml\napiVersion:
      v1\nkind: Secret\nmetadata:\n  name: dai-xlr-postgresql\n  labels:\n    app.kubernetes.io/name:
      postgresql\n    helm.sh/chart: postgresql-10.12.8\n    app.kubernetes.io/instance:
      dai-xlr\n    app.kubernetes.io/managed-by: Helm\n  namespace: digitalai\ntype:
      Opaque\ndata:\n  postgresql-password: \"cG9zdGdyZXM=\"\n---\n# Source: digitalai-release/charts/rabbitmq/templates/secrets.yaml\napiVersion:
      v1\nkind: Secret\nmetadata:\n  name: dai-xlr-rabbitmq\n  namespace: \"digitalai\"\n
      \ labels:\n    app.kubernetes.io/name: rabbitmq\n    helm.sh/chart: rabbitmq-8.26.1\n
      \   app.kubernetes.io/instance: dai-xlr\n    app.kubernetes.io/managed-by: Helm\ntype:
      Opaque\ndata:\n  rabbitmq-erlang-cookie: \"UkVMRUFTRVJBQkJJVE1RQ0xVU1RFUg==\"\n---\n#
      Source: digitalai-release/charts/rabbitmq/templates/secrets.yaml\napiVersion:
      v1\nkind: Secret\nmetadata:\n  name: xlr-load-definition\n  namespace: \"digitalai\"\n
      \ labels:\n    app.kubernetes.io/name: rabbitmq\n    helm.sh/chart: rabbitmq-8.26.1\n
      \   app.kubernetes.io/instance: dai-xlr\n    app.kubernetes.io/managed-by: Helm\ntype:
      Opaque\nstringData:\n  xlr-load_definition.json: |\n    {\n    \"users\": [\n
      \     {\n          \"name\": \"guest\",\n          \"password\": \"guest\",\n
      \         \"tags\": \"administrator\"\n      }\n      ],\n    \"vhosts\": [\n
      \     {\n        \"name\": \"/\"\n      }\n      ],\n      \"permissions\":
      [\n      {\n        \"user\": \"guest\",\n        \"vhost\": \"/\",\n        \"configure\":
      \".*\",\n        \"write\": \".*\",\n        \"read\": \".*\"\n      }\n      ],\n
      \   \"global_parameters\": [\n      {\n        \"name\": \"cluster_name\",\n
      \       \"value\": \"\"\n      }\n      ],\n     \"policies\": [\n        {\n
      \         \"name\": \"ha-all\",\n          \"apply-to\": \"all\",\n          \"pattern\":
      \".*\",\n          \"vhost\": \"/\",\n          \"definition\": {\n            \"ha-mode\":
      \"all\",\n            \"ha-sync-mode\": \"automatic\",\n            \"ha-sync-batch-size\":
      1\n          }\n        }\n      ]\n    }\n---\n# Source: digitalai-release/templates/create-db.yaml\nkind:
      Secret\napiVersion: v1\nmetadata:\n  name: postgresql-init-sql-xlr\n  labels:\n
      \   app: digitalai-release\n    chart: digitalai-release-23.1\n    release:
      dai-xlr\ndata:\n  init.sql: Q1JFQVRFIFVTRVIgInhsciIgV0lUSCBFTkNSWVBURUQgUEFTU1dPUkQgJ3hscic7CkNSRUFURSBEQVRBQkFTRSAieGxyLWRiIjsKR1JBTlQgQUxMIFBSSVZJTEVHRVMgT04gREFUQUJBU0UgInhsci1kYiIgVE8gInhsciI7CkNSRUFURSBVU0VSICJ4bHItcmVwb3J0IiBXSVRIIEVOQ1JZUFRFRCBQQVNTV09SRCAneGxyLXJlcG9ydCc7CkNSRUFURSBEQVRBQkFTRSAieGxyLXJlcG9ydC1kYiI7CkdSQU5UIEFMTCBQUklWSUxFR0VTIE9OIERBVEFCQVNFICJ4bHItcmVwb3J0LWRiIiBUTyAieGxyLXJlcG9ydCI7CkNSRUFURSBVU0VSICJrZXljbG9hayIgV0lUSCBFTkNSWVBURUQgUEFTU1dPUkQgJ2tleWNsb2FrJzsKQ1JFQVRFIERBVEFCQVNFICJrZXljbG9hayI7CkdSQU5UIEFMTCBQUklWSUxFR0VTIE9OIERBVEFCQVNFICJrZXljbG9hayIgVE8gImtleWNsb2FrIjsK\n---\n#
      Source: digitalai-release/templates/secrets.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n
      \ name: dai-xlr-digitalai-release\n  labels:\n    app: digitalai-release\n    chart:
      digitalai-release-23.1\n    release: dai-xlr\n    heritage: Helm\ntype: Opaque\ndata:\n
      \ release-password: \"Z2lsYWRtaW4=\"\n  xlr-License: \"TFMwdElFeHBZMlZ1YzJVZ0xTMHRDa3hwWTJWdWMyVWdkbVZ5YzJsdmJqb2dNd3BRY205a2RXTjBPaUJZVENCU1pXeGxZWE5sQ2t4cFkyVnVjMlZrSUhSdk9pQllaV0pwWVV4aFluTUtRMjl1ZEdGamREb2dXR1ZpYVdGTVlXSnpJRWx1ZEdWeWJtRnNJRlZ6WlNCUGJteDVJRHhwYm1adlFIaGxZbWxoYkdGaWN5NWpiMjArQ2tWNGNHbHlaWE1nWVdaMFpYSTZJREl3TXpjdE1ERXRNREVLVTNWd2NHOXlkQ0J3YjJ4cFkzazZJRGg0TlFwRlpHbDBhVzl1T2lCRmJuUmxjbkJ5YVhObENpMHRMU0JUYVdkdVlYUjFjbVVnS0ZOSVFURjNhWFJvUkZOQktTQXRMUzBLTXpBeVpEQXlNVFF6TjJaa01qVXdNakE1TlRVMU1ESXpPVGMyTXprMU5EVmpaalptWVRRNVpHRTNOVEUyTm1Nd01ESXhOVEF3T1RFelpUbGtaVGM0WVRrM01URTBPV1U1T1dWaE9UazNZallLTldFMlpHWTFORFV6TVRBNU1ERUtMUzB0SUVWdVpDQnZaaUJUYVdkdVlYUjFjbVVnTFMwdA==\"\n
      \ repositoryKeystore: \"enM3T3pnQUFBQUlBQUFBQkFBQUFBd0FXWkdWd2JHOTVhWFF0Y0dGemMzTjNiM0prTFd0bGVRQUFBWW90VTJTa3JPMEFCWE55QUROamIyMHVjM1Z1TG1OeWVYQjBieTV3Y205MmFXUmxjaTVUWldGc1pXUlBZbXBsWTNSR2IzSkxaWGxRY205MFpXTjBiM0xOVjhwWjV6QzdVd0lBQUhoeUFCbHFZWFpoZUM1amNubHdkRzh1VTJWaGJHVmtUMkpxWldOMFBqWTlwc08zVkhBQ0FBUmJBQTFsYm1OdlpHVmtVR0Z5WVcxemRBQUNXMEpiQUJCbGJtTnllWEIwWldSRGIyNTBaVzUwY1FCK0FBSk1BQWx3WVhKaGJYTkJiR2QwQUJKTWFtRjJZUzlzWVc1bkwxTjBjbWx1Wnp0TUFBZHpaV0ZzUVd4bmNRQitBQU40Y0hWeUFBSmJRcXp6Ri9nR0NGVGdBZ0FBZUhBQUFBQVJNQThFQ0F3dGdENFVMYzBSQWdNRERVQjFjUUIrQUFVQUFBQ1FQN3crbmR4RlZyMy9ialRaV2ZCU1NGeGhzSEsxNWI2M2ZrWXZrdUFUd1VleXZiUlJ4ZkpsUlRqcUt6bTY4NmVPdURYdjZzRmVSR1gyVmRCWHhFWkZCTzVheHdnY0h1SFpUa0g1QlVkM01pVWlLbSsyQk5UeVBOdGUrK3BUTVFOcVFkN3BSZUsvM3FxekpXOVpuOHMxOW1wdklXMjRSWktZQ3I4d0FuMjVxQjlSK3F5UldZeU85b1BHVEFUT2ROL1JkQUFXVUVKRlYybDBhRTFFTlVGdVpGUnlhWEJzWlVSRlUzUUFGbEJDUlZkcGRHaE5SRFZCYm1SVWNtbHdiR1ZFUlZQSzhKNVY0TVhOZmIvQThwVDFUdWJzSWlJRGlBPT0=\"\n
      \ keystorePassphrase: \"Z2lsYWRtaW4=\"\n---\n# Source: digitalai-release/charts/nginx-ingress-controller/templates/default-backend-configmap.yaml\napiVersion:
      v1\nkind: ConfigMap\nmetadata:\n  name: dai-xlr-nginx-ingress-controller-default-backend\n
      \ namespace: \"digitalai\"\n  labels:\n    app.kubernetes.io/name: nginx-ingress-controller\n
      \   helm.sh/chart: nginx-ingress-controller-9.2.0\n    app.kubernetes.io/instance:
      dai-xlr\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component:
      default-backend\ndata:\n  defaultBackend.conf: |-\n    location /healthz {\n
      \     return 200;\n    }\n    \n    location / {\n      return 404;\n    }\n---\n#
      Source: digitalai-release/charts/rabbitmq/templates/configuration.yaml\napiVersion:
      v1\nkind: ConfigMap\nmetadata:\n  name: dai-xlr-rabbitmq-config\n  namespace:
      \"digitalai\"\n  labels:\n    app.kubernetes.io/name: rabbitmq\n    helm.sh/chart:
      rabbitmq-8.26.1\n    app.kubernetes.io/instance: dai-xlr\n    app.kubernetes.io/managed-by:
      Helm\ndata:\n  rabbitmq.conf: |-\n    \n    ## Clustering\n    ##\n    cluster_formation.peer_discovery_backend
      \ = rabbit_peer_discovery_k8s\n    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local\n
      \   cluster_formation.node_cleanup.interval = 10\n    cluster_formation.node_cleanup.only_log_warning
      = true\n    cluster_partition_handling = autoheal\n    # queue master locator\n
      \   queue_master_locator = min-masters\n    # enable guest user\n    loopback_users.guest
      = false\n    load_definitions = /app/xlr-load_definition.json\n    raft.wal_max_size_bytes
      = 1048576\n---\n# Source: digitalai-release/templates/configuration-management.yaml\napiVersion:
      v1\nkind: ConfigMap\nmetadata:\n  name: xlr-configuration-management-script\n
      \ labels:\n    app: digitalai-release\n    chart: digitalai-release-23.1\n    release:
      dai-xlr\ndata:\n  op-based-run.sh: |-\n    rm -fv /opt/xebialabs/xl-release-server/conf/xl-release-license.lic;\n
      \   rm -fv /opt/xebialabs/xl-release-server/conf/xlr-wrapper-linux.conf;\n    rm
      -fv /opt/xebialabs/xl-release-server/conf/jmx-exporter.yaml;\n    echo \"Finished
      reset of the conf files\";\n    mkdir /opt/xebialabs/xl-release-server/xlr-configuration-management/;\n
      \   ORIGINAL_PWD=$(pwd);\n    cd /opt/xebialabs/xl-release-server/xlr-configuration-management/;\n
      \   cp /opt/xebialabs/xlr-configuration-management/* .; chmod +x *.sh;\n\n    if
      [ -z \"$OIDC_CLIENT_ID\" ]; then\n      echo \"Not generating xl-release.conf.template
      as no OIDC configuration\"\n    else\n      if [[ ${OP_GENERATE_XL_CONFIG} !=
      \"true\" ]]; then\n          echo \"Not generating xl-release.conf.template
      as OP_GENERATE_XL_CONFIG != 'true'\"\n          cp ${APP_HOME}/default-conf/op-xl-release.conf.template
      ${APP_HOME}/default-conf/xl-release.conf.template\n      elif [ -e ${APP_HOME}/default-conf/op-xl-release.conf.template
      ]; then\n          echo \"Generate configuration file default-conf/xl-release.conf.template
      from environment parameters\"\n          sed -e \"s#\\${OIDC_CLIENT_ID}#${OIDC_CLIENT_ID}#g\"
      \\\n              -e \"s#\\${OIDC_CLIENT_SECRET}#${OIDC_CLIENT_SECRET}#g\" \\\n
      \             ${APP_HOME}/default-conf/op-xl-release.conf.template > ${APP_HOME}/default-conf/xl-release.conf.template\n
      \     fi\n    fi\n\n    [ -x ./op-configuration-management.sh ] && ./op-configuration-management.sh;\n
      \   cd $ORIGINAL_PWD;\n    echo \"Finished release configuration management\";\n
      \   exec /opt/xebialabs/xl-release-server/bin/run-in-container.sh\n\n  op-configuration-management.sh:
      |-\n    cat example.txt && echo \"\"; # Add here commands to be executed before
      release start\n  example.txt: |-\n    Nothing to manage at this point.\n---\n#
      Source: digitalai-release/templates/pvc.yaml\nkind: PersistentVolumeClaim\napiVersion:
      v1\nmetadata:\n  annotations:\n    helm.sh/resource-policy: keep\n  name: dai-xlr-digitalai-release\n
      \ labels:\n    app: digitalai-release\n    chart: digitalai-release-23.1\n    release:
      dai-xlr\n    heritage: Helm\nspec:\n  accessModes:\n    - \"ReadWriteOnce\"\n
      \ resources:\n    requests:\n      storage: \"1Gi\"\n  storageClassName: \"default\"\n---\n#
      Source: digitalai-release/charts/nginx-ingress-controller/templates/clusterrole.yaml\napiVersion:
      rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: dai-xlr-nginx-ingress-controller\n
      \ namespace: \"digitalai\"\n  labels:\n    app.kubernetes.io/name: nginx-ingress-controller\n
      \   helm.sh/chart: nginx-ingress-controller-9.2.0\n    app.kubernetes.io/instance:
      dai-xlr\n    app.kubernetes.io/managed-by: Helm\nrules:\n  - apiGroups:\n      -
      \"\"\n    resources:\n      - configmaps\n      - endpoints\n      - nodes\n
      \     - pods\n      - secrets\n    verbs:\n      - list\n      - watch\n  -
      apiGroups:\n      - \"\"\n    resources:\n      - nodes\n    verbs:\n      -
      get\n  - apiGroups:\n      - \"\"\n    resources:\n      - services\n    verbs:\n
      \     - get\n      - list\n      - update\n      - watch\n  - apiGroups:\n      \n
      \     - networking.k8s.io\n    resources:\n      - ingresses\n    verbs:\n      -
      get\n      - list\n      - watch\n  - apiGroups:\n      - \"\"\n    resources:\n
      \     - events\n    verbs:\n      - create\n      - patch\n  - apiGroups:\n
      \     \n      - networking.k8s.io\n    resources:\n      - ingresses/status\n
      \   verbs:\n      - update\n  - apiGroups:\n      \n      - networking.k8s.io\n
      \   resources:\n      - ingressclasses\n    verbs:\n      - get\n      - list\n
      \     - watch\n---\n# Source: digitalai-release/charts/nginx-ingress-controller/templates/clusterrolebinding.yaml\napiVersion:
      rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: dai-xlr-nginx-ingress-controller\n
      \ namespace: \"digitalai\"\n  labels:\n    app.kubernetes.io/name: nginx-ingress-controller\n
      \   helm.sh/chart: nginx-ingress-controller-9.2.0\n    app.kubernetes.io/instance:
      dai-xlr\n    app.kubernetes.io/managed-by: Helm\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n
      \ kind: ClusterRole\n  name: dai-xlr-nginx-ingress-controller\nsubjects:\n  -
      kind: ServiceAccount\n    name: dai-xlr-nginx-ingress-controller\n    namespace:
      \"digitalai\"\n---\n# Source: digitalai-release/charts/nginx-ingress-controller/templates/role.yaml\napiVersion:
      rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: dai-xlr-nginx-ingress-controller\n
      \ namespace: \"digitalai\"\n  labels:\n    app.kubernetes.io/name: nginx-ingress-controller\n
      \   helm.sh/chart: nginx-ingress-controller-9.2.0\n    app.kubernetes.io/instance:
      dai-xlr\n    app.kubernetes.io/managed-by: Helm\nrules:\n  - apiGroups:\n      -
      \"\"\n    resources:\n      - namespaces\n    verbs:\n      - get\n  - apiGroups:\n
      \     - \"\"\n    resources:\n      - configmaps\n      - pods\n      - secrets\n
      \     - endpoints\n    verbs:\n      - get\n      - list\n      - watch\n  -
      apiGroups:\n      - \"\"\n    resources:\n      - services\n    verbs:\n      -
      get\n      - list\n      - update\n      - watch\n  - apiGroups:\n      \n      -
      networking.k8s.io\n    resources:\n      - ingresses\n    verbs:\n      - get\n
      \     - list\n      - watch\n  - apiGroups:\n      \n      - networking.k8s.io\n
      \   resources:\n      - ingresses/status\n    verbs:\n      - update\n  - apiGroups:\n
      \     - \"\"\n    resources:\n      - configmaps\n    resourceNames:\n      -
      ingress-controller-leader\n    verbs:\n      - get\n      - update\n  - apiGroups:\n
      \     - \"\"\n    resources:\n      - configmaps\n    verbs:\n      - create\n
      \ - apiGroups:\n      - \"\"\n    resources:\n      - endpoints\n    verbs:\n
      \     - create\n      - get\n      - update\n  - apiGroups:\n      - \"\"\n
      \   resources:\n      - events\n    verbs:\n      - create\n      - patch\n---\n#
      Source: digitalai-release/charts/rabbitmq/templates/role.yaml\nkind: Role\napiVersion:
      rbac.authorization.k8s.io/v1\nmetadata:\n  name: dai-xlr-rabbitmq-endpoint-reader\n
      \ namespace: \"digitalai\"\n  labels:\n    app.kubernetes.io/name: rabbitmq\n
      \   helm.sh/chart: rabbitmq-8.26.1\n    app.kubernetes.io/instance: dai-xlr\n
      \   app.kubernetes.io/managed-by: Helm\nrules:\n  - apiGroups: [\"\"]\n    resources:
      [\"endpoints\"]\n    verbs: [\"get\"]\n  - apiGroups: [\"\"]\n    resources:
      [\"events\"]\n    verbs: [\"create\"]\n---\n# Source: digitalai-release/charts/nginx-ingress-controller/templates/rolebinding.yaml\napiVersion:
      rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: dai-xlr-nginx-ingress-controller\n
      \ namespace: \"digitalai\"\n  labels:\n    app.kubernetes.io/name: nginx-ingress-controller\n
      \   helm.sh/chart: nginx-ingress-controller-9.2.0\n    app.kubernetes.io/instance:
      dai-xlr\n    app.kubernetes.io/managed-by: Helm\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n
      \ kind: Role\n  name: dai-xlr-nginx-ingress-controller\nsubjects:\n  - kind:
      ServiceAccount\n    name: dai-xlr-nginx-ingress-controller\n    namespace: \"digitalai\"\n---\n#
      Source: digitalai-release/charts/rabbitmq/templates/rolebinding.yaml\nkind:
      RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: dai-xlr-rabbitmq-endpoint-reader\n
      \ namespace: \"digitalai\"\n  labels:\n    app.kubernetes.io/name: rabbitmq\n
      \   helm.sh/chart: rabbitmq-8.26.1\n    app.kubernetes.io/instance: dai-xlr\n
      \   app.kubernetes.io/managed-by: Helm\nsubjects:\n  - kind: ServiceAccount\n
      \   name: dai-xlr-rabbitmq\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n
      \ kind: Role\n  name: dai-xlr-rabbitmq-endpoint-reader\n---\n# Source: digitalai-release/charts/nginx-ingress-controller/templates/controller-service.yaml\napiVersion:
      v1\nkind: Service\nmetadata:\n  name: dai-xlr-nginx-ingress-controller\n  namespace:
      \"digitalai\"\n  labels:\n    app.kubernetes.io/name: nginx-ingress-controller\n
      \   helm.sh/chart: nginx-ingress-controller-9.2.0\n    app.kubernetes.io/instance:
      dai-xlr\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component:
      controller\nspec:\n  type: LoadBalancer\n  sessionAffinity: None\n  externalTrafficPolicy:
      \"\"\n  ports:\n    - name: http\n      port: 80\n      protocol: TCP\n      targetPort:
      http\n    - name: https\n      port: 443\n      protocol: TCP\n      targetPort:
      https\n  selector:\n    app.kubernetes.io/name: nginx-ingress-controller\n    app.kubernetes.io/instance:
      dai-xlr\n    app.kubernetes.io/component: controller\n---\n# Source: digitalai-release/charts/nginx-ingress-controller/templates/default-backend-service.yaml\napiVersion:
      v1\nkind: Service\nmetadata:\n  name: dai-xlr-nginx-ingress-controller-default-backend\n
      \ namespace: \"digitalai\"\n  labels:\n    app.kubernetes.io/name: nginx-ingress-controller\n
      \   helm.sh/chart: nginx-ingress-controller-9.2.0\n    app.kubernetes.io/instance:
      dai-xlr\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component:
      default-backend\n  annotations:\nspec:\n  type: ClusterIP\n  ports:\n    - name:
      http\n      port: 80\n      protocol: TCP\n      targetPort: http\n  selector:\n
      \   app.kubernetes.io/name: nginx-ingress-controller\n    app.kubernetes.io/instance:
      dai-xlr\n    app.kubernetes.io/component: default-backend\n---\n# Source: digitalai-release/charts/postgresql/templates/svc-headless.yaml\napiVersion:
      v1\nkind: Service\nmetadata:\n  name: dai-xlr-postgresql-headless\n  labels:\n
      \   app.kubernetes.io/name: postgresql\n    helm.sh/chart: postgresql-10.12.8\n
      \   app.kubernetes.io/instance: dai-xlr\n    app.kubernetes.io/managed-by: Helm\n
      \   # Use this annotation in addition to the actual publishNotReadyAddresses\n
      \   # field below because the annotation will stop being respected soon but
      the\n    # field is broken in some versions of Kubernetes:\n    # https://github.com/kubernetes/kubernetes/issues/58662\n
      \   service.alpha.kubernetes.io/tolerate-unready-endpoints: \"true\"\n  namespace:
      digitalai\nspec:\n  type: ClusterIP\n  clusterIP: None\n  # We want all pods
      in the StatefulSet to have their addresses published for\n  # the sake of the
      other Postgresql pods even before they're ready, since they\n  # have to be
      able to talk to each other in order to become ready.\n  publishNotReadyAddresses:
      true\n  ports:\n    - name: tcp-postgresql\n      port: 5432\n      targetPort:
      tcp-postgresql\n  selector:\n    app.kubernetes.io/name: postgresql\n    app.kubernetes.io/instance:
      dai-xlr\n---\n# Source: digitalai-release/charts/postgresql/templates/svc.yaml\napiVersion:
      v1\nkind: Service\nmetadata:\n  name: dai-xlr-postgresql\n  labels:\n    app.kubernetes.io/name:
      postgresql\n    helm.sh/chart: postgresql-10.12.8\n    app.kubernetes.io/instance:
      dai-xlr\n    app.kubernetes.io/managed-by: Helm\n  annotations:\n  namespace:
      digitalai\nspec:\n  type: ClusterIP\n  ports:\n    - name: tcp-postgresql\n
      \     port: 5432\n      targetPort: tcp-postgresql\n  selector:\n    app.kubernetes.io/name:
      postgresql\n    app.kubernetes.io/instance: dai-xlr\n    role: primary\n---\n#
      Source: digitalai-release/charts/rabbitmq/templates/svc-headless.yaml\napiVersion:
      v1\nkind: Service\nmetadata:\n  name: dai-xlr-rabbitmq-headless\n  namespace:
      \"digitalai\"\n  labels:\n    app.kubernetes.io/name: rabbitmq\n    helm.sh/chart:
      rabbitmq-8.26.1\n    app.kubernetes.io/instance: dai-xlr\n    app.kubernetes.io/managed-by:
      Helm\nspec:\n  clusterIP: None\n  ports:\n    - name: epmd\n      port: 4369\n
      \     targetPort: epmd\n    - name: amqp\n      port: 5672\n      targetPort:
      amqp\n    - name: dist\n      port: 25672\n      targetPort: dist\n    - name:
      http-stats\n      port: 15672\n      targetPort: stats\n  selector: \n    app.kubernetes.io/name:
      rabbitmq\n    app.kubernetes.io/instance: dai-xlr\n  publishNotReadyAddresses:
      true\n---\n# Source: digitalai-release/charts/rabbitmq/templates/svc.yaml\napiVersion:
      v1\nkind: Service\nmetadata:\n  name: dai-xlr-rabbitmq\n  namespace: \"digitalai\"\n
      \ labels:\n    app.kubernetes.io/name: rabbitmq\n    helm.sh/chart: rabbitmq-8.26.1\n
      \   app.kubernetes.io/instance: dai-xlr\n    app.kubernetes.io/managed-by: Helm\nspec:\n
      \ type: ClusterIP\n  ports:\n    - name: amqp\n      port: 5672\n      targetPort:
      amqp\n      nodePort: null\n    - name: epmd\n      port: 4369\n      targetPort:
      epmd\n      nodePort: null\n    - name: dist\n      port: 25672\n      targetPort:
      dist\n      nodePort: null\n    - name: http-stats\n      port: 15672\n      targetPort:
      stats\n      nodePort: null\n  selector: \n    app.kubernetes.io/name: rabbitmq\n
      \   app.kubernetes.io/instance: dai-xlr\n---\n# Source: digitalai-release/templates/service.yaml\napiVersion:
      v1\r\nkind: Service\r\nmetadata:\r\n  name: dai-xlr-digitalai-release\r\n  labels:\r\n
      \   app: digitalai-release\r\n    chart: digitalai-release-23.1\r\n    release:
      dai-xlr\r\n    heritage: Helm\r\nspec:\r\n  selector:\r\n    app: digitalai-release\r\n
      \   release: dai-xlr\r\n  type: ClusterIP\r\n  ports:\r\n    - name: xlr-http\r\n
      \     port: 80\r\n      targetPort: http\r\n      protocol: TCP\n---\n# Source:
      digitalai-release/charts/nginx-ingress-controller/templates/controller-deployment.yaml\napiVersion:
      apps/v1\nkind: Deployment\nmetadata:\n  name: dai-xlr-nginx-ingress-controller\n
      \ namespace: \"digitalai\"\n  labels:\n    app.kubernetes.io/name: nginx-ingress-controller\n
      \   helm.sh/chart: nginx-ingress-controller-9.2.0\n    app.kubernetes.io/instance:
      dai-xlr\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component:
      controller\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name:
      nginx-ingress-controller\n      app.kubernetes.io/instance: dai-xlr\n      app.kubernetes.io/component:
      controller\n  replicas: 1\n  revisionHistoryLimit: 10\n  minReadySeconds: 0\n
      \ template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: nginx-ingress-controller\n
      \       helm.sh/chart: nginx-ingress-controller-9.2.0\n        app.kubernetes.io/instance:
      dai-xlr\n        app.kubernetes.io/managed-by: Helm\n        app.kubernetes.io/component:
      controller\n    spec:\n      \n      dnsPolicy: ClusterFirst\n      affinity:\n
      \       podAffinity:\n          \n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n
      \           - podAffinityTerm:\n                labelSelector:\n                  matchLabels:\n
      \                   app.kubernetes.io/name: nginx-ingress-controller\n                    app.kubernetes.io/instance:
      dai-xlr\n                    app.kubernetes.io/component: controller\n                namespaces:\n
      \                 - \"digitalai\"\n                topologyKey: kubernetes.io/hostname\n
      \             weight: 1\n        nodeAffinity:\n          \n      securityContext:\n
      \       fsGroup: 1001\n      hostNetwork: false\n      serviceAccountName: dai-xlr-nginx-ingress-controller\n
      \     terminationGracePeriodSeconds: 60\n      containers:\n        - name:
      controller\n          image: docker.io/bitnami/nginx-ingress-controller:1.0.4-debian-10-r13\n
      \         imagePullPolicy: \"IfNotPresent\"\n          securityContext:\n            allowPrivilegeEscalation:
      true\n            capabilities:\n              add:\n              - NET_BIND_SERVICE\n
      \             drop:\n              - ALL\n            runAsNonRoot: true\n            runAsUser:
      1001\n          args:\n            - /nginx-ingress-controller\n            -
      --default-backend-service=digitalai/dai-xlr-nginx-ingress-controller-default-backend\n
      \           - --election-id=ingress-controller-leader\n            - --controller-class=k8s.io/ingress-nginx-dai-xlr\n
      \           - --configmap=digitalai/dai-xlr-nginx-ingress-controller\n            -
      --ingress-class=nginx-dai-xlr\n          env:\n            - name: POD_NAME\n
      \             valueFrom:\n                fieldRef:\n                  fieldPath:
      metadata.name\n            - name: POD_NAMESPACE\n              valueFrom:\n
      \               fieldRef:\n                  fieldPath: metadata.namespace\n
      \         envFrom:\n          livenessProbe:\n            failureThreshold:
      3\n            httpGet:\n              path: /healthz\n              port: 10254\n
      \             scheme: HTTP\n            initialDelaySeconds: 10\n            periodSeconds:
      10\n            successThreshold: 1\n            timeoutSeconds: 1\n            httpGet:\n
      \             path: /healthz\n              port: 10254\n              scheme:
      HTTP\n          readinessProbe:\n            failureThreshold: 3\n            httpGet:\n
      \             path: /healthz\n              port: 10254\n              scheme:
      HTTP\n            initialDelaySeconds: 10\n            periodSeconds: 10\n            successThreshold:
      1\n            timeoutSeconds: 1\n            httpGet:\n              path:
      /healthz\n              port: 10254\n              scheme: HTTP\n          ports:\n
      \           - name: http\n              containerPort: 80\n              protocol:
      TCP\n            - name: https\n              containerPort: 443\n              protocol:
      TCP\n          resources:\n            limits: {}\n            requests: {}\n
      \         volumeMounts:\n      volumes:\n---\n# Source: digitalai-release/charts/nginx-ingress-controller/templates/default-backend-deployment.yaml\napiVersion:
      apps/v1\nkind: Deployment\nmetadata:\n  name: dai-xlr-nginx-ingress-controller-default-backend\n
      \ namespace: \"digitalai\"\n  labels:\n    app.kubernetes.io/name: nginx-ingress-controller\n
      \   helm.sh/chart: nginx-ingress-controller-9.2.0\n    app.kubernetes.io/instance:
      dai-xlr\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component:
      default-backend\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name:
      nginx-ingress-controller\n      app.kubernetes.io/instance: dai-xlr\n      app.kubernetes.io/component:
      default-backend\n  replicas: 1\n  template:\n    metadata:\n      labels:\n
      \       app.kubernetes.io/name: nginx-ingress-controller\n        helm.sh/chart:
      nginx-ingress-controller-9.2.0\n        app.kubernetes.io/instance: dai-xlr\n
      \       app.kubernetes.io/managed-by: Helm\n        app.kubernetes.io/component:
      default-backend\n    spec:\n      \n      affinity:\n        podAffinity:\n
      \         \n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n
      \           - podAffinityTerm:\n                labelSelector:\n                  matchLabels:\n
      \                   app.kubernetes.io/name: nginx-ingress-controller\n                    app.kubernetes.io/instance:
      dai-xlr\n                    app.kubernetes.io/component: default-backend\n
      \               namespaces:\n                  - \"digitalai\"\n                topologyKey:
      kubernetes.io/hostname\n              weight: 1\n        nodeAffinity:\n          \n
      \     securityContext:\n        fsGroup: 1001\n      serviceAccountName: dai-xlr-nginx-ingress-controller\n
      \     terminationGracePeriodSeconds: 60\n      containers:\n        - name:
      default-backend\n          image: docker.io/bitnami/nginx:1.21.3-debian-10-r48\n
      \         imagePullPolicy: \"IfNotPresent\"\n          securityContext:\n            runAsNonRoot:
      true\n            runAsUser: 1001\n          args:\n          env:\n          envFrom:\n
      \         livenessProbe:\n            failureThreshold: 3\n            httpGet:\n
      \             path: /healthz\n              port: http\n              scheme:
      HTTP\n            initialDelaySeconds: 30\n            periodSeconds: 10\n            successThreshold:
      1\n            timeoutSeconds: 5\n            httpGet:\n              path:
      /healthz\n              port: http\n              scheme: HTTP\n          readinessProbe:\n
      \           failureThreshold: 6\n            httpGet:\n              path: /healthz\n
      \             port: http\n              scheme: HTTP\n            initialDelaySeconds:
      0\n            periodSeconds: 5\n            successThreshold: 1\n            timeoutSeconds:
      5\n            httpGet:\n              path: /healthz\n              port: http\n
      \             scheme: HTTP\n          ports:\n            - name: http\n              containerPort:
      8080\n              protocol: TCP\n          resources:\n            limits:
      {}\n            requests: {}\n          volumeMounts:\n            - name: nginx-config-volume\n
      \             mountPath: /opt/bitnami/nginx/conf/bitnami/\n              readOnly:
      true\n      volumes:\n        - name: nginx-config-volume\n          configMap:\n
      \           name: dai-xlr-nginx-ingress-controller-default-backend\n            items:\n
      \             - key: defaultBackend.conf\n                path: defaultBackend.conf\n---\n#
      Source: digitalai-release/charts/postgresql/templates/statefulset.yaml\napiVersion:
      apps/v1\nkind: StatefulSet\nmetadata:\n  name: dai-xlr-postgresql\n  labels:\n
      \   app.kubernetes.io/name: postgresql\n    helm.sh/chart: postgresql-10.12.8\n
      \   app.kubernetes.io/instance: dai-xlr\n    app.kubernetes.io/managed-by: Helm\n
      \   app.kubernetes.io/component: primary\n  annotations:\n  namespace: digitalai\nspec:\n
      \ serviceName: dai-xlr-postgresql-headless\n  replicas: 1\n  updateStrategy:\n
      \   type: RollingUpdate\n  selector:\n    matchLabels:\n      app.kubernetes.io/name:
      postgresql\n      app.kubernetes.io/instance: dai-xlr\n      role: primary\n
      \ template:\n    metadata:\n      name: dai-xlr-postgresql\n      labels:\n
      \       app.kubernetes.io/name: postgresql\n        helm.sh/chart: postgresql-10.12.8\n
      \       app.kubernetes.io/instance: dai-xlr\n        app.kubernetes.io/managed-by:
      Helm\n        role: primary\n        app.kubernetes.io/component: primary\n
      \   spec:      \n      affinity:\n        podAffinity:\n          \n        podAntiAffinity:\n
      \         preferredDuringSchedulingIgnoredDuringExecution:\n            - podAffinityTerm:\n
      \               labelSelector:\n                  matchLabels:\n                    app.kubernetes.io/name:
      postgresql\n                    app.kubernetes.io/instance: dai-xlr\n                    app.kubernetes.io/component:
      primary\n                namespaces:\n                  - \"digitalai\"\n                topologyKey:
      kubernetes.io/hostname\n              weight: 1\n        nodeAffinity:\n          \n
      \     securityContext:\n        fsGroup: 1001\n      automountServiceAccountToken:
      false\n      containers:\n        - name: dai-xlr-postgresql\n          image:
      docker.io/bitnami/postgresql:11.13.0-debian-10-r73\n          imagePullPolicy:
      \"IfNotPresent\"\n          resources:\n            requests:\n              cpu:
      250m\n              memory: 256Mi\n          securityContext:\n            runAsUser:
      1001\n          env:\n            - name: BITNAMI_DEBUG\n              value:
      \"false\"\n            - name: POSTGRESQL_PORT_NUMBER\n              value:
      \"5432\"\n            - name: POSTGRESQL_VOLUME_DIR\n              value: \"/bitnami/postgresql\"\n
      \           - name: PGDATA\n              value: \"/bitnami/postgresql/data\"\n
      \           - name: POSTGRES_USER\n              value: \"postgres\"\n            -
      name: POSTGRES_PASSWORD\n              valueFrom:\n                secretKeyRef:\n
      \                 name: dai-xlr-postgresql\n                  key: postgresql-password\n
      \           - name: POSTGRESQL_ENABLE_LDAP\n              value: \"no\"\n            -
      name: POSTGRESQL_ENABLE_TLS\n              value: \"no\"\n            - name:
      POSTGRESQL_LOG_HOSTNAME\n              value: \"false\"\n            - name:
      POSTGRESQL_LOG_CONNECTIONS\n              value: \"false\"\n            - name:
      POSTGRESQL_LOG_DISCONNECTIONS\n              value: \"false\"\n            -
      name: POSTGRESQL_PGAUDIT_LOG_CATALOG\n              value: \"off\"\n            -
      name: POSTGRESQL_CLIENT_MIN_MESSAGES\n              value: \"error\"\n            -
      name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES\n              value: \"pgaudit\"\n
      \           - name: POSTGRESQL_MAX_CONNECTIONS\n              value: \"150\"\n
      \         ports:\n            - name: tcp-postgresql\n              containerPort:
      5432\n          livenessProbe:\n            exec:\n              command:\n
      \               - /bin/sh\n                - -c\n                - exec pg_isready
      -U \"postgres\" -h 127.0.0.1 -p 5432\n            initialDelaySeconds: 30\n
      \           periodSeconds: 10\n            timeoutSeconds: 5\n            successThreshold:
      1\n            failureThreshold: 6\n          readinessProbe:\n            exec:\n
      \             command:\n                - /bin/sh\n                - -c\n                -
      -e\n                - |\n                  exec pg_isready -U \"postgres\" -h
      127.0.0.1 -p 5432\n                  [ -f /opt/bitnami/postgresql/tmp/.initialized
      ] || [ -f /bitnami/postgresql/.initialized ]\n            initialDelaySeconds:
      5\n            periodSeconds: 10\n            timeoutSeconds: 5\n            successThreshold:
      1\n            failureThreshold: 6\n          volumeMounts:\n            - name:
      custom-init-scripts-secret\n              mountPath: /docker-entrypoint-initdb.d/secret\n
      \           - name: dshm\n              mountPath: /dev/shm\n            - name:
      data\n              mountPath: /bitnami/postgresql\n              subPath: \n
      \     volumes:\n        - name: custom-init-scripts-secret\n          secret:\n
      \           secretName: postgresql-init-sql-xlr\n        - name: dshm\n          emptyDir:\n
      \           medium: Memory\n  volumeClaimTemplates:\n    - metadata:\n        name:
      data\n      spec:\n        accessModes:\n          - \"ReadWriteOnce\"\n        resources:\n
      \         requests:\n            storage: \"1Gi\"\n        storageClassName:
      default\n---\n# Source: digitalai-release/charts/rabbitmq/templates/statefulset.yaml\napiVersion:
      apps/v1\nkind: StatefulSet\nmetadata:\n  name: dai-xlr-rabbitmq\n  namespace:
      \"digitalai\"\n  labels:\n    app.kubernetes.io/name: rabbitmq\n    helm.sh/chart:
      rabbitmq-8.26.1\n    app.kubernetes.io/instance: dai-xlr\n    app.kubernetes.io/managed-by:
      Helm\nspec:\n  serviceName: dai-xlr-rabbitmq-headless\n  podManagementPolicy:
      Parallel\n  replicas: 1\n  updateStrategy:\n    type: RollingUpdate\n  selector:\n
      \   matchLabels:\n      app.kubernetes.io/name: rabbitmq\n      app.kubernetes.io/instance:
      dai-xlr\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name:
      rabbitmq\n        helm.sh/chart: rabbitmq-8.26.1\n        app.kubernetes.io/instance:
      dai-xlr\n        app.kubernetes.io/managed-by: Helm\n      annotations:\n        checksum/config:
      d9234a10fcec3a6d6b57bd064fb29fe589dbea77d3a38afb258a1d1f5410b567\n        checksum/secret:
      5b07379fe96cd3ab831a0ebe626719108343f3894cd4938c9cba587986058584\n    spec:\n
      \     \n      serviceAccountName: dai-xlr-rabbitmq\n      affinity:\n        podAffinity:\n
      \         \n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n
      \           - podAffinityTerm:\n                labelSelector:\n                  matchLabels:\n
      \                   app.kubernetes.io/name: rabbitmq\n                    app.kubernetes.io/instance:
      dai-xlr\n                namespaces:\n                  - \"digitalai\"\n                topologyKey:
      kubernetes.io/hostname\n              weight: 1\n        nodeAffinity:\n          \n
      \     securityContext:\n        fsGroup: 1001\n        runAsUser: 1001\n      terminationGracePeriodSeconds:
      120\n      initContainers:\n        - name: volume-permissions\n          image:
      docker.io/bitnami/bitnami-shell:10-debian-10-r233\n          imagePullPolicy:
      \"IfNotPresent\"\n          command:\n            - /bin/bash\n          args:\n
      \           - -ec\n            - |\n              mkdir -p \"/bitnami/rabbitmq/mnesia\"\n
      \             chown -R \"1001:1001\" \"/bitnami/rabbitmq/mnesia\"\n          securityContext:\n
      \           runAsUser: 0\n          resources:\n            limits: {}\n            requests:
      {}\n          volumeMounts:\n            - name: data\n              mountPath:
      /bitnami/rabbitmq/mnesia\n      containers:\n        - name: rabbitmq\n          image:
      docker.io/bitnami/rabbitmq:3.9.8-debian-10-r6\n          imagePullPolicy: \"IfNotPresent\"\n
      \         env:\n            - name: BITNAMI_DEBUG\n              value: \"false\"\n
      \           - name: MY_POD_IP\n              valueFrom:\n                fieldRef:\n
      \                 fieldPath: status.podIP\n            - name: MY_POD_NAME\n
      \             valueFrom:\n                fieldRef:\n                  fieldPath:
      metadata.name\n            - name: MY_POD_NAMESPACE\n              valueFrom:\n
      \               fieldRef:\n                  fieldPath: metadata.namespace\n
      \           - name: K8S_SERVICE_NAME\n              value: \"dai-xlr-rabbitmq-headless\"\n
      \           - name: K8S_ADDRESS_TYPE\n              value: hostname\n            -
      name: RABBITMQ_FORCE_BOOT\n              value: \"yes\"\n            - name:
      RABBITMQ_NODE_NAME\n              value: \"rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local\"\n
      \           - name: K8S_HOSTNAME_SUFFIX\n              value: \".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local\"\n
      \           - name: RABBITMQ_MNESIA_DIR\n              value: \"/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)\"\n
      \           - name: RABBITMQ_LDAP_ENABLE\n              value: \"no\"\n            -
      name: RABBITMQ_LOGS\n              value: \"-\"\n            - name: RABBITMQ_ULIMIT_NOFILES\n
      \             value: \"65536\"\n            - name: RABBITMQ_USE_LONGNAME\n
      \             value: \"true\"\n            - name: RABBITMQ_ERL_COOKIE\n              valueFrom:\n
      \               secretKeyRef:\n                  name: dai-xlr-rabbitmq\n                  key:
      rabbitmq-erlang-cookie\n            - name: RABBITMQ_LOAD_DEFINITIONS\n              value:
      \"yes\"\n            - name: RABBITMQ_SECURE_PASSWORD\n              value:
      \"no\"\n            - name: RABBITMQ_PLUGINS\n              value: \"rabbitmq_management,
      rabbitmq_peer_discovery_k8s, rabbitmq_amqp1_0\"\n          ports:\n            -
      name: amqp\n              containerPort: 5672\n            - name: dist\n              containerPort:
      25672\n            - name: stats\n              containerPort: 15672\n            -
      name: epmd\n              containerPort: 4369\n          livenessProbe:\n            exec:\n
      \             command:\n                - /bin/bash\n                - -ec\n
      \               - rabbitmq-diagnostics -q ping\n            initialDelaySeconds:
      120\n            periodSeconds: 30\n            timeoutSeconds: 20\n            successThreshold:
      1\n            failureThreshold: 6\n          readinessProbe:\n            exec:\n
      \             command:\n                - /bin/bash\n                - -ec\n
      \               - rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics
      -q check_local_alarms\n            initialDelaySeconds: 10\n            periodSeconds:
      30\n            timeoutSeconds: 20\n            successThreshold: 1\n            failureThreshold:
      3\n          lifecycle:\n            preStop:\n              exec:\n                command:\n
      \                 - /bin/bash\n                  - -ec\n                  -
      |\n                    if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh
      ]]; then\n                        /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh
      -t \"120\" -d  \"false\"\n                    else\n                        rabbitmqctl
      stop_app\n                    fi\n          resources:\n            limits:
      {}\n            requests: {}\n          volumeMounts:\n            - name: configuration\n
      \             mountPath: /bitnami/rabbitmq/conf\n            - name: data\n
      \             mountPath: /bitnami/rabbitmq/mnesia\n            - name: load-definition-volume\n
      \             mountPath: /app\n              readOnly: true\n      volumes:\n
      \       - name: configuration\n          configMap:\n            name: dai-xlr-rabbitmq-config\n
      \           items:\n              - key: rabbitmq.conf\n                path:
      rabbitmq.conf\n        - name: load-definition-volume\n          secret:\n            secretName:
      \"xlr-load-definition\"\n  volumeClaimTemplates:\n    - metadata:\n        name:
      data\n        labels:\n          app.kubernetes.io/name: rabbitmq\n          app.kubernetes.io/instance:
      dai-xlr\n      spec:\n        accessModes:\n          - \"ReadWriteOnce\"\n
      \       resources:\n          requests:\n            storage: \"1Gi\"\n        storageClassName:
      default\n---\n# Source: digitalai-release/templates/xl-release.yaml\napiVersion:
      apps/v1\r\nkind: StatefulSet\r\nmetadata:\r\n  name: dai-xlr-digitalai-release\r\n
      \ labels:\r\n    app: digitalai-release\r\n    chart: digitalai-release-23.1\r\n
      \   release: dai-xlr\r\n    heritage: Helm\r\nspec:\r\n  podManagementPolicy:
      OrderedReady\r\n  replicas: 1\r\n  updateStrategy:\r\n    type: RollingUpdate\r\n
      \ selector:\r\n    matchLabels:\r\n      app: digitalai-release\r\n      release:
      dai-xlr\r\n  serviceName: dai-xlr-digitalai-release\r\n  template:\r\n    metadata:\r\n
      \     labels:\r\n        app: digitalai-release\r\n        release: dai-xlr\r\n
      \   spec:\r\n      securityContext:\r\n        fsGroup: 10001\r\n      initContainers:\r\n
      \       - name: wait-for-db\r\n          image: \"xebialabs/tiny-tools:22.2.0\"\r\n
      \         command:\r\n            - sh\r\n            - -c\r\n            -
      >\r\n              until nc -z -w 2 $POSTGRES_SVC $POSTGRES_PORT && echo database
      ok; do\r\n                sleep 2;\r\n              done;\r\n          env:\r\n
      \          - name: POSTGRES_SVC\r\n             value: dai-xlr-postgresql\r\n
      \          - name: POSTGRES_PORT\r\n             value: \"5432\"\r\n        -
      name: wait-for-rabbitmq\r\n          image: \"xebialabs/tiny-tools:22.2.0\"\r\n
      \         command:\r\n            - sh\r\n            - -c\r\n            -
      >\r\n              until nc -z -w 2 $RABBITMQ_SVC $RABBITMQ_PORT && echo rabbitmq
      ok; do\r\n                sleep 2;\r\n              done;\r\n          env:\r\n
      \          - name: RABBITMQ_SVC\r\n             value: dai-xlr-rabbitmq\r\n
      \          - name: RABBITMQ_PORT\r\n             value: \"5672\"\r\n      containers:\r\n
      \       - name: digitalai-release\r\n          image: \"xebialabs/xl-release:23.1.0\"\r\n
      \         imagePullPolicy: \"Always\"\r\n          ports:       \r\n            -
      name: http\r\n              containerPort: 5516\r\n          command:\r\n            -
      sh\r\n            - -c\r\n            - >\r\n              /opt/xebialabs/tini
      -- /opt/xebialabs/xlr-configuration-management/op-based-run.sh\r\n          volumeMounts:\r\n
      \           - name: reports-dir\r\n              mountPath: /opt/xebialabs/xl-release-server/reports\r\n
      \             subPath: reports\r\n            - name: reports-dir\r\n              mountPath:
      /opt/xebialabs/xl-release-server/work\r\n              subPath: work\r\n            -
      name: reports-dir\r\n              mountPath: /opt/xebialabs/xl-release-server/conf\r\n
      \             subPath: conf\r\n            - name: reports-dir\r\n              mountPath:
      /opt/xebialabs/xl-release-server/ext\r\n              subPath: ext\r\n            -
      name: reports-dir\r\n              mountPath: /opt/xebialabs/xl-release-server/hotfix\r\n
      \             subPath: hotfix\r\n            - name: reports-dir\r\n              mountPath:
      /opt/xebialabs/xl-release-server/hotfix/lib\r\n              subPath: lib\r\n
      \           - name: reports-dir\r\n              mountPath: /opt/xebialabs/xl-release-server/hotfix/plugins\r\n
      \             subPath: plugins\r\n            - name: reports-dir\r\n              mountPath:
      /opt/xebialabs/xl-release-server/log\r\n              subPath: log\r\n            -
      name: xlr-configuration-management-volume\r\n              mountPath: /opt/xebialabs/xlr-configuration-management\r\n
      \         livenessProbe:\r\n            httpGet:\r\n              path: /\r\n
      \             port: http\r\n            initialDelaySeconds: 60\r\n            periodSeconds:
      10\r\n            failureThreshold: 12\r\n          readinessProbe:\r\n            httpGet:\r\n
      \             path: /\r\n              port: http\r\n            initialDelaySeconds:
      60\r\n            periodSeconds: 10\r\n            failureThreshold: 12\r\n
      \         env:\r\n            - name: ADMIN_PASSWORD\n              valueFrom:\n
      \                 secretKeyRef:\n                      name: dai-xlr-digitalai-release\n
      \                     key: release-password\r\n            - name: XL_CLUSTER_MODE\r\n
      \             value: full\r\n            - name: SERVER_URL\r\n              value:
      http://giltest.com/\r\n            - name: APP_PORT\r\n              value:
      \"5516\"\r\n            - name: XL_DB_URL\r\n              value: jdbc:postgresql://dai-xlr-postgresql:5432/xlr-db\r\n
      \           - name: XL_DB_USERNAME\r\n              value: xlr\r\n            -
      name: XL_DB_PASSWORD\r\n              value: \"xlr\"\r\n            - name:
      XL_REPORT_DB_URL\r\n              value: jdbc:postgresql://dai-xlr-postgresql:5432/xlr-report-db\r\n
      \           - name: XL_REPORT_DB_USERNAME\r\n              value: xlr-report\r\n
      \           - name: XL_REPORT_DB_PASSWORD\r\n              value: \"xlr-report\"\r\n
      \           - name: XL_LICENSE\n              valueFrom:\n                  secretKeyRef:\n
      \                     name: dai-xlr-digitalai-release\n                      key:
      xlr-License\r\n            - name: XL_METRICS_ENABLED\r\n              value:
      \"false\"\r\n            - name: GENERATE_XL_CONFIG\r\n              value:
      \"true\"\r\n            - name: USE_IP_AS_HOSTNAME\r\n              value: \"false\"\r\n
      \           - name: FORCE_UPGRADE\r\n              value: \"true\"\r\n            -
      name: FORCE_REMOVE_MISSING_TYPES\r\n              value: \"false\"\r\n            -
      name: ENABLE_EMBEDDED_QUEUE\r\n              value: \"false\"\r\n            -
      name: XLR_TASK_QUEUE_USERNAME\r\n              value: guest\r\n            -
      name: XLR_TASK_QUEUE_PASSWORD\r\n              value: guest\r\n            -
      name: XLR_TASK_QUEUE_URL\r\n              value: \"amqp://dai-xlr-rabbitmq.digitalai.svc.cluster.local:5672/\"\r\n
      \           - name: XLR_TASK_QUEUE_NAME\r\n              value: \"xlr-tasks-queue\"\r\n
      \           - name: REPOSITORY_KEYSTORE\n              valueFrom:\n                  secretKeyRef:\n
      \                     name: dai-xlr-digitalai-release\n                      key:
      repositoryKeystore\r\n            - name: REPOSITORY_KEYSTORE_PASSPHRASE\n              valueFrom:\n
      \                 secretKeyRef:\n                      name: dai-xlr-digitalai-release\n
      \                     key: keystorePassphrase\r\n            - name: XLR_HTTP2_ENABLED\r\n
      \             value: \"false\"\r\n          resources:\r\n            {}\r\n
      \     terminationGracePeriodSeconds: 200\r\n      volumes:\r\n        - name:
      reports-dir\r\n          persistentVolumeClaim:\r\n            claimName: dai-xlr-digitalai-release\r\n
      \       - name: xlr-configuration-management-volume\r\n          configMap:\r\n
      \           name: xlr-configuration-management-script\r\n            defaultMode:
      0777\n---\n# Source: digitalai-release/templates/ingress.yaml\napiVersion: networking.k8s.io/v1\nkind:
      Ingress\nmetadata:\n  name: dai-xlr-digitalai-release\n  labels:\n    app: digitalai-release\n
      \   chart: digitalai-release-23.1\n    release: dai-xlr\n    heritage: Helm\n
      \ annotations:\n    kubernetes.io/ingress.class: nginx-dai-xlr\n    nginx.ingress.kubernetes.io/affinity:
      cookie\n    nginx.ingress.kubernetes.io/proxy-connect-timeout: \"60\"\n    nginx.ingress.kubernetes.io/proxy-read-timeout:
      \"60\"\n    nginx.ingress.kubernetes.io/proxy-send-timeout: \"60\"\n    nginx.ingress.kubernetes.io/rewrite-target:
      /\n    nginx.ingress.kubernetes.io/session-cookie-name: JSESSIONID\n    nginx.ingress.kubernetes.io/ssl-redirect:
      \"false\"\nspec:\n  rules:\n    - host: giltest.com\n      http:\n        paths:\n
      \         - path: /\n            pathType: ImplementationSpecific\n            backend:\n
      \             service:\n                name: dai-xlr-digitalai-release\n                port:\n
      \                 number: 80\n---\n# Source: digitalai-release/charts/nginx-ingress-controller/templates/ingressclass.yaml\napiVersion:
      networking.k8s.io/v1\nkind: IngressClass\nmetadata:\n  labels:\n    app.kubernetes.io/name:
      nginx-ingress-controller\n    helm.sh/chart: nginx-ingress-controller-9.2.0\n
      \   app.kubernetes.io/instance: dai-xlr\n    app.kubernetes.io/managed-by: Helm\n
      \   app.kubernetes.io/component: controller\n  name: nginx-dai-xlr\nspec:\n
      \ controller: k8s.io/ingress-nginx-dai-xlr\n"
    name: dai-xlr
